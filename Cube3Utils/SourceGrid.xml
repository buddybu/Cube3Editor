<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceGrid</name>
    </assembly>
    <members>
        <member name="T:DevAge.ComponentModel.BoundDataView">
            <summary>
            A class to support list binding to a DataView object.
            Implement the IBoundList.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.BoundDataView.EditedObject">
            <summary>
            Gets the current edited object
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.BoundList`1">
            <summary>
            A class derived from BoundListBase that can be used to bind a list control (like SourceGrid) to a generic IList class.
            If the IList is an instance of List class then also the Sort is supported.
            Implement the IBoundList interface used for data binding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DevAge.ComponentModel.BoundListBase`1">
            <summary>
            An abstract class used for data binding. This class can be used as a base implementation of the IBoundList interface.
            You can use the concreate classes BoundList or BoundDataView or a custom class.
            To implement you own bound list class simply derive from this class and implement the abstract methods.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.BoundListBase`1.EditedObject">
            <summary>
            Gets the current edited object
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.Clear">
            <summary>
            Clear all list items
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.BoundListBase`1.AllowSort">
            <summary>
            Gets or sets if the sort is enabled. Usually is enabled only if the IList is an instance of List class
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.GetItemProperty(System.String,System.StringComparison)">
            <summary>
            Get an item property by name
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.OnAddNew">
            <summary>
            Create a new item (row) add it at the end of the list and return the new item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.IndexOf(System.Object)">
            <summary>
            Return the index of the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.OnRemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.OnClear">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.BoundListBase`1.Item(System.Int32)">
            <summary>
            Return the item at the specified position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.BoundListBase`1.Count">
            <summary>
            Return the row count of the list
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.BoundListBase`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sort the list
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="T:DevAge.ComponentModel.IBoundList">
            <summary>
            A generic binded list interface. See BoundDataView or BoundList for a concreate implementation.
            It is used as an abstraction layer for list objects (typically a list can be a DataView or a IList class)
            Can be used to bind a list control (like SourceGrid).
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.ItemDeletedEventHandler">
            <summary>
            Item deletion event handler.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:DevAge.ComponentModel.ItemDeletedEventArgs">
            <summary>
            Event arguments for item deletion event.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.ComponentLight">
            <summary>
            A IComponent implementation, used as a base class for component derived class. It is similar to the System Component class but doesn't derive from MarshalByRef class, for this reason it is faster and consume less resources.
            Can be serialized.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.ComponentLight.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.ComponentLight.#ctor(DevAge.ComponentModel.ComponentLight)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.CurrencyTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with the currency symbol.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.DateTimeTypeConverter">
            <summary>
            Summary description for DateTimeTypeConverter.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.DateTimeStyles">
            <summary>
            DateTimeStyle for Parse operations. DefaultValue: AllowInnerWhite|AllowLeadingWhite|AllowTrailingWhite|AllowWhiteSpaces
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.Format">
            <summary>
            Format of the Date. Example: G, g, d, D. Default value : G
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.ParseFormats">
            <summary>
            Formats to check when parse the string. If null call with no format the parse method. Default value: null
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.NumberTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with a custom format number.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.PercentTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with the percent symbol.
            Support Conversion for Float, Double and Decimal
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.PercentTypeConverter.ConsiderAllStringAsPercent">
            <summary>
            If true and the user insert a string with no percent symbel the value is divided by 100, otherwise not.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.RichTextTypeConverter">
            <summary>
            A TypeConverter that support rich text conversion from and to string.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            String and RichText can be converted from
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            String and RichText can be converted to
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert String to RichText
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert RichText to String
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Converter.RichTextTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Check if rich text string is valid
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.ComponentModel.EmptyTypeDescriptorContext">
            <summary>
            Class used to implement an empty ITypeDescriptorContext.
            This class seems to be required by the mono framework, ms framework accept null as ITypeDescriptorContext
            </summary>
        </member>
        <member name="F:DevAge.ComponentModel.EmptyTypeDescriptorContext.Empty">
            <summary>
            Empty ITypeDescriptorContext instance. For now I use null because mono seems to don't like this class (and throw anyway an exception)
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.ConvertingObjectEventArgs.DestinationType">
            <summary>
            Destination type to convert the Value. Can be null if no destination type is required.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.IValidator">
            <summary>
            An interface to support value conversion and validation. 
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowNull">
            <summary>
            True to allow null object value or NullString string Value
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.NullString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.NullDisplayString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToDisplayString
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsNullString(System.String)">
            <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ObjectToValue(System.Object)">
            <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToObject(System.Object,System.Type)">
            <summary>
            Convert a value valid for the current validator ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
            <param name="p_Value"></param>
            <param name="p_ReturnObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToString(System.Object)">
            <summary>
            Convert a value valid for the current validator ValueType to a string that can be used for other conversions, for example StringToValue method.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StringToValue(System.String)">
            <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowStringConversion">
            <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToDisplayString(System.Object)">
            <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidValue(System.Object)">
            <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object,System.Object@)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
            <param name="p_Object"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
            <param name="p_strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String,System.Object@)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. An returns the object converted.
            </summary>
            <param name="p_strValue"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.MinimumValue">
            <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.MaximumValue">
            <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.ValueType">
            <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.DefaultValue">
            <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValues">
            <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValuesExclusive">
            <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsInStandardValues(System.Object)">
            <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValueAtIndex(System.Int32)">
            <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_Index"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValuesIndexOf(System.Object)">
            <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_StandardValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.CultureInfo">
            <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.Changed">
            <summary>
            Fired when one of the properties of the Validator change.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValidatorBase">
            <summary>
            A base class to support value conversion and validation. This class is used if no conversion is required or as a base class for specialized validator.
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor">
            <summary>
            Constructor. Initialize the class using a null type.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type used to validate the values. If null no validation is made.</param>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowNull">
            <summary>
            True to allow null object value or NullString string Value
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullDisplayString">
            <summary>
            Null string representation. Default is empty string.
            Used by ValueToDisplayString
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsNullString(System.String)">
            <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToStringForError(System.Object)">
            <summary>
            Returns a string used for error description for a specified object. Usually used when printing the object for the error message when there is a conversion error.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToValue(System.Object)">
            <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToObject(System.Object,System.Type)">
            <summary>
            Convert a value according to the current ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
            <param name="p_Value"></param>
            <param name="p_ReturnObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToString(System.Object)">
            <summary>
            Converts a value object to a string representation
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StringToValue(System.String)">
            <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowStringConversion">
            <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToDisplayString(System.Object)">
            <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToDisplayString(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidValue(System.Object)">
            <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object,System.Object@)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
            <param name="p_Object"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
            <param name="p_strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String,System.Object@)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. Returns as out parameter the object converted.
            </summary>
            <param name="p_strValue"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MinimumValue">
            <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MaximumValue">
            <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueType">
            <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueTypeName">
            <summary>
            Set the ValueType property using a string value, usually used by designer code generation.
            The designer for this type is configured to use only this property.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.DefaultValue">
            <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValues">
            <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesExclusive">
            <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsInStandardValues(System.Object)">
            <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValueAtIndex(System.Int32)">
            <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_Index"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesIndexOf(System.Object)">
            <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_StandardValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.CultureInfo">
            <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnChanged(System.EventArgs)">
            <summary>
            Fired when one of the properties of the Validator change.
            Call the Changed event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.Changed">
            <summary>
            Fired when one of the properties of the Validator change.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValidatorTypeConverter">
            <summary>
            A string editor that use a TypeConverter for conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor">
            <summary>
            Constructor. Initialize the Validator with a null TypeConverter.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type)">
            <summary>
            Constructor. If the Type doesn't implements a TypeConverter no conversion is made.
            </summary>
            <param name="p_Type"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Constructor
            </summary>
            <param name="p_Type">Cannot be null.</param>
            <param name="p_TypeConverter">Can be null to don't allow any conversion.</param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorTypeConverter.TypeConverter">
            <summary>
            TypeConverter used for this type editor, cannot be null.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValueMapping">
            <summary>
            The ValueMapping class can be used to easily map a value to a string value or a display string for conversion
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor(DevAge.ComponentModel.Validator.IValidator,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="validator"></param>
            <param name="valueList">A list of valid value. If null an error occurred. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="displayStringList">A list of displayString. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="specialList">A list of object that can be converted to value. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="specialType">The type of object stored in the specialList collection.</param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.BindValidator(DevAge.ComponentModel.Validator.IValidator)">
            <summary>
            Bind the specified validator
            </summary>
            <param name="p_Validator"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.UnBindValidator(DevAge.ComponentModel.Validator.IValidator)">
            <summary>
            Unbind the specified validator
            </summary>
            <param name="p_Validator"></param>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ValueList">
            <summary>
            A list of valid value. If null an error occurred. The index must match the index of ValueList and DisplayStringList
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialList">
            <summary>
            A list of object that can be converted to value. Can be null. The index must match the index of ValueList and DisplayStringList. Must be a list of object of the type specified in the SpecialType property.
            Usually this property can be used when performing special conversion of specific type. For example if you want to map an enum value or an id value to a string for a better user experience.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialType">
            <summary>
            Gets or sets the type used for converting an object to a value and a value to an object when populating the SpecialList property. Default is System.String.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.DisplayStringList">
            <summary>
            A list of displayString. Can be null. The index must match the index of ValueList and DisplayStringList
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ThrowErrorIfNotFound">
            <summary>
            Gets or sets, if throw an error when the value if not found in one of the collections.
            Default true.
            </summary>
        </member>
        <member name="T:DevAge.Drawing.AnchorArea">
            <summary>
            The AnchorArea class is used to specify the anchor properties of an object.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            Use float.NaN to set a null value for one of the properties.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.AnchorArea.#ctor">
            <summary>
            Default is constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.AnchorArea.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Construct an anchor area object
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="center"></param>
            <param name="middle"></param>
        </member>
        <member name="M:DevAge.Drawing.AnchorArea.#ctor(DevAge.Drawing.AnchorArea)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.AnchorArea.#ctor(DevAge.Drawing.ContentAlignment,System.Boolean)">
            <summary>
            Constructo an anchorarea class based on the aligment and the stretch parameters.
            </summary>
            <param name="aligment"></param>
            <param name="stretch"></param>
        </member>
        <member name="M:DevAge.Drawing.AnchorArea.CalculateArea(System.Drawing.RectangleF,System.Drawing.SizeF,DevAge.Drawing.AnchorArea)">
            <summary>
            Calculate the destination area of 
            </summary>
            <param name="area"></param>
            <param name="content"></param>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.BorderLine">
            <summary>
            A struct that represents a single border line.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.BorderLine.Equals(System.Object)">
            <summary>
            Compare to current border with another border.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.BrushsCache">
            <summary>
            A class used to cache the Brush used by the drawing methods. Use the GetBrush method to retrive or insert new brushes.
            Remember to call Dispose when you don't need anymore this class to release all graphics resources.
            Usually you don't need to use this class directly but you can acces it using the GraphicsCache class.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.BrushsCache.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxCapacity">A positive number that specify the capacity of the cache.</param>
        </member>
        <member name="M:DevAge.Drawing.BrushsCache.GetBrush(System.Drawing.Color)">
            <summary>
            Returns the existing Brush object if already exist in the cache, otherwise create it and store in the cache.
            If there aren't anymore free slots (count > capacity) the this method create the pen but don't store it in the cache.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.BrushsCache.Dispose">
            <summary>
            Dispose. Release the graphics resources.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanel.#ctor(DevAge.Drawing.VisualElements.EditablePanel)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanel.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.#ctor(DevAge.Drawing.VisualElements.EditablePanelBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelBase.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="point"></param>
            <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.#ctor(DevAge.Drawing.VisualElements.EditablePanelThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.EditablePanelThemed.mStandard">
            <summary>
            Standard button used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.EditablePanelThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.BackgroundBase">
            <summary>
            The background visualelement can be used as a background for a container element.
            Override the OnDraw, GetBackgroundContentRectangle and GetBackgroundExtent to draw a custom background.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.#ctor(DevAge.Drawing.VisualElements.BackgroundBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.GetBackgroundContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
            <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundBase.GetBackgroundExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.BackgroundLinearGradient">
            <summary>
            Class used to draw a standard linear gradient background. If FirstColor == SecondColor a solid color is drawed.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="firstColor"></param>
            <param name="secondColor"></param>
            <param name="angle"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.#ctor(DevAge.Drawing.VisualElements.BackgroundLinearGradient)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.FirstColor">
            <summary>
            Gets or sets the first back color of the content.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.SecondColor">
            <summary>
            Gets or sets the second back color of the content.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.Angle">
            <summary>
            Gets or sets the angle of the gradient
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.BlendFactors">
            <summary>
            Gradients are commonly used to smoothly shade the interiors of shapes. A blend pattern is defined by two arrays (Factors and Positions) that each contain the same number of elements. Each element of the Positions array represents a proportion of the distance along the gradient line. Each element of the Factors array represents the proportion of the starting and ending colors in the gradient blend at the position along the gradient line represented by the corresponding element in the Positions array.
            For example, if corresponding elements of the Positions and Factors arrays are 0.2 and 0.3, respectively, for a linear gradient from blue to red along a 100-pixel line, the color 20 pixels along that line (20 percent of the distance) consists of 30 percent blue and 70 percent red.
            
            See System.Drawing.Drawing2D.Blend for details
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundLinearGradient.BlendPositions">
             <summary>
             Gradients are commonly used to smoothly shade the interiors of shapes. A blend pattern is defined by two arrays (Factors and Positions) that each contain the same number of elements. Each element of the Positions array represents a proportion of the distance along the gradient line. Each element of the Factors array represents the proportion of the starting and ending colors in the gradient blend at the position along the gradient line represented by the corresponding element in the Positions array.
             For example, if corresponding elements of the Positions and Factors arrays are 0.2 and 0.3, respectively, for a linear gradient from blue to red along a 100-pixel line, the color 20 pixels along that line (20 percent of the distance) consists of 30 percent blue and 70 percent red.
            
             See System.Drawing.Drawing2D.Blend for details
             </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundLinearGradient.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.BackgroundSolid.BackColor">
            <summary>
            Gets or sets the back color of the content.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.BackgroundSolid.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Button.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Button.#ctor(DevAge.Drawing.VisualElements.Button)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Button.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonBase.#ctor(DevAge.Drawing.VisualElements.ButtonBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.#ctor(DevAge.Drawing.VisualElements.ButtonThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.ButtonThemed.mStandardButton">
            <summary>
            Standard button used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ButtonThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBox.#ctor(DevAge.Drawing.VisualElements.CheckBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBox.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxBase.#ctor(DevAge.Drawing.VisualElements.CheckBoxBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.#ctor(DevAge.Drawing.VisualElements.CheckBoxThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.CheckBoxThemed.mStandardCheckBox">
            <summary>
            Standard checkbox used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.CheckBoxThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.#ctor(DevAge.Drawing.VisualElements.ColumnHeader)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeader.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.BackColor">
            <summary>
            Back Color
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.BackgroundColorStyle">
            <summary>
            Draw mode for the header. Default is Linear.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.ColumnHeader.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderBase.#ctor(DevAge.Drawing.VisualElements.ColumnHeaderBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.#ctor(DevAge.Drawing.VisualElements.ColumnHeaderThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.ColumnHeaderThemed.mStandardHeader">
            <summary>
            Standard column header used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ColumnHeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.Container">
            <summary>
            A container for other elements
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Container.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Container.#ctor(DevAge.Drawing.VisualElements.Container)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Container.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.ContainerBase">
            <summary>
            The base abstract class for all container VisualElements. 
            Override the GetElements() to get a collection of elements to draw inside the container.
            Use the Border, Padding and Background properties to customize the container
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.#ctor(DevAge.Drawing.VisualElements.ContainerBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.ContainerBase.ElementsDrawMode">
            <summary>
            Gets or sets a property that specify how to draw the elements.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.ContainerBase.Background">
            <summary>
            The background used to draw
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
            <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper (foremost) element and the first element is the background element.
            </summary>
            <param name="measure"></param>
            <param name="area"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateRemainingArea(System.Drawing.RectangleF,DevAge.Drawing.AnchorArea,System.Drawing.RectangleF)">
            <summary>
            Utility function. Calculates the remaining empty area of a specified area and a given content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateSizeWithContent(System.Drawing.SizeF,DevAge.Drawing.AnchorArea,System.Drawing.SizeF)">
            <summary>
            Utility function. Calculate the required size adding using the anchor informations of the available area.
            </summary>
            <param name="currentSize"></param>
            <param name="contentAnchor"></param>
            <param name="contentSize"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.ContainerBase.CalculateSizeWithAnchor(System.Drawing.SizeF,DevAge.Drawing.AnchorArea,System.Drawing.SizeF)">
            <summary>
            Add the anchor informations to the element content size
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButton.#ctor(DevAge.Drawing.VisualElements.DropDownButton)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButton.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonBase.#ctor(DevAge.Drawing.VisualElements.DropDownButtonBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.#ctor(DevAge.Drawing.VisualElements.DropDownButtonThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.DropDownButtonThemed.mStandardButton">
            <summary>
            Standard button used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.DropDownButtonThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Header.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Header.#ctor(DevAge.Drawing.VisualElements.Header)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Header.BackColor">
            <summary>
            Back Color
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Header.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Header.GradientAngle">
            <summary>
            Gradient angle used for linear gradient.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Header.BackgroundColorStyle">
            <summary>
            Draw mode for the header. Default is Linear.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Header.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Header.GetBackgroundContentRectangle(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
            <summary>
            Calculate the client area where the content can be drawed, usually removing the area used by the background, for example removing a border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Header.GetBackgroundExtent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Calculate the total area used by the backgound and the content, adding the background area to the content area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderBase.#ctor(DevAge.Drawing.VisualElements.HeaderBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.#ctor(DevAge.Drawing.VisualElements.HeaderThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.HeaderThemed.mStandardHeader">
            <summary>
            Standard header used when the XP style are disabled.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.HeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor(System.Drawing.Icon)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Icon.#ctor(DevAge.Drawing.VisualElements.Icon)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Icon.Value">
            <summary>
            Gets or sets the Icon to draw. Default is null.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Image.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Image.#ctor(System.Drawing.Image)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Image.#ctor(DevAge.Drawing.VisualElements.Image)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Image.Value">
            <summary>
            Gets or sets the Image to draw. Default is null.
            </summary>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.IRichText">
            <summary>
            Default interface for RichText implementations
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IRichText.Value">
            <summary>
            Text of format RichText
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IRichText.ForeColor">
            <summary>
            ForeColor of text
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IRichText.TextAlignment">
            <summary>
            Text Alignment.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IRichText.Font">
            <summary>
            Text Font
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IRichText.RotateFlipType">
            <summary>
            Rotate flip type
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor(DevAge.Windows.Forms.RichText)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichText.#ctor(DevAge.Drawing.VisualElements.RichText)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RichText.Value">
            <summary>
            Gets or sets the string of format rich text to draw. Default is null.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RichText.ForeColor">
            <summary>
            Gets or sets the fore color of the content. System.Windows.Forms.Control.DefaultForeColor
            </summary>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.RichText.m_TextAlignment">
            <summary>
            Text Alignment
            </summary>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.RichText.m_Font">
            <summary>
            Text Font
            </summary>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.RichText.m_RotateFlipType">
            <summary>
            Rotate flip type
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichText.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichText.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor(DevAge.Windows.Forms.RichText)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.#ctor(DevAge.Drawing.VisualElements.RichTextGDI)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.AssertRichTextBoxEditor">
            <summary>
            Init rich text box control
            </summary>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.RichTextGDI.m_RichTextBoxEditor">
            <summary>
            Will be used to draw picture of rich text. Is static for performance reasons
            and therefore needs to be locked.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.HundredthInchToTwips(System.Single)">
            <summary>
            Convert between 1/100 inch (unit used by the .NET framework)
            and twips (1/1440 inch, used by Win32 API calls)
            </summary>
            <param name="n">Value in 1/100 inch</param>
            <returns>Value in twips</returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.FormatRange(System.Boolean,DevAge.Windows.Forms.DevAgeRichTextBox,System.Drawing.Bitmap@,System.Int32,System.Int32)">
            <summary>
            Calculate or render the contents of our RichTextBox for printing
            </summary>
            <param name="measureOnly">If true, only the calculation is performed,
            otherwise the text is rendered as well</param>
            <param name="b"></param>
            <param name="rtb"></param>
            <param name="charFrom">Index of first character to be printed</param>
            <param name="charTo">Index of last character to be printed</param>
            <returns>(Index of last character that fitted on the
            page) + 1</returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.FormatRangeDone(DevAge.Windows.Forms.DevAgeRichTextBox)">
            <summary>
            Free cached data from rich edit control after printing
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.GetBitmapArea(System.Drawing.RectangleF,System.Drawing.RotateFlipType)">
            <summary>
            Helper method to get bitmap with size according its area and rotate flip type
            </summary>
            <param name="area"></param>
            <param name="rotateFlipType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.OnDraw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Render RichTextBox as GDI
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.DrawImage(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.Bitmap)">
            <summary>
            Draw actual picture
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RichTextGDI.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeader.#ctor(DevAge.Drawing.VisualElements.RowHeader)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeader.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RowHeader.BackColor">
            <summary>
            Back Color
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RowHeader.BackgroundColorStyle">
            <summary>
            Draw mode for the header. Default is Linear.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RowHeader.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderBase.#ctor(DevAge.Drawing.VisualElements.RowHeaderBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.#ctor(DevAge.Drawing.VisualElements.RowHeaderThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevAge.Drawing.VisualElements.RowHeaderThemed.mStandardRowHeader">
            <summary>
            Standard header used when the XP style are disabled.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.RowHeaderThemed.RotateColHeaderIfNotDefined">
            <summary>
            Gets or sets a property to indicate to rotate the standard column header if the row header is not defined in the current theme.
            This is expecially usefull because for many themes the row header is not defined. Default is true.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.RowHeaderThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.SortIndicator">
            <summary>
            A class used to draw a generic sort indicator, usually a arrow. Use the SortStyle to customize the sort style (arrow up or arrow down)
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicator.#ctor(DevAge.Drawing.VisualElements.SortIndicator)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicator.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.#ctor(DevAge.Drawing.VisualElements.SortIndicatorThemed)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.SortIndicatorThemed.GetRenderer(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Gets the System.Windows.Forms.VisualStyles.VisualStyleRenderer to draw the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Text.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Text.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Text.#ctor(DevAge.Drawing.VisualElements.Text)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Text.Font">
            <summary>
            Gets or sets the Font of the content. Default is System.Windows.Forms.Control.DefaultFont.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Text.ForeColor">
            <summary>
            Gets or sets the fore color of the content. System.Windows.Forms.Control.DefaultForeColor
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.Text.Value">
            <summary>
            Gets or sets the string to draw. Default is null.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Text.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.Text.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextGDI.#ctor(DevAge.Drawing.VisualElements.TextGDI)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.TextGDI.StringFormat">
            <summary>
            Gets or sets the StringFormat object. 
            Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.TextGDI.Alignment">
            <summary>
            Gets or sets the alignment of the content.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextGDI.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextGDI.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextRenderer.#ctor(DevAge.Drawing.VisualElements.TextRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextRenderer.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.TextRenderer.TextFormatFlags">
            <summary>
            Gets or sets the TextFormatFlags enum. 
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.TextRenderer.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.IVisualElement">
            <summary>
            Interface for all the VisualElements classes. Inherits from IClonable.
            Support a deep clone.
            </summary>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.IVisualElement.AnchorArea">
            <summary>
            Gets or sets the area where the content must be drawed.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.IVisualElement.GetDrawingArea(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
            <summary>
            Gets the area where the visual element will be drawed.
            </summary>
            <param name="measure"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Measure(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Measure the current VisualElement using the specified settings.
            </summary>
            <param name="measure"></param>
            <param name="minSize">If Empty is not used.</param>
            <param name="maxSize">If Empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.IVisualElement.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.RectangleF@)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
            <param name="drawingArea"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.IVisualElement.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper element and the first element is the background element.
            </summary>
            <param name="measure"></param>
            <param name="area"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.VisualElements.VisualElementBase">
            <summary>
            VisualElement abstract base class. 
            You must override the OnDraw, OnMeasureContent and Clone.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.#ctor(DevAge.Drawing.VisualElements.VisualElementBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:DevAge.Drawing.VisualElements.VisualElementBase.AnchorArea">
            <summary>
            Gets or sets the area where the content must be drawed.
            You can set to align the content to the left, right, top or bottom using the relative properties (Left, Right, Top, Bottom).
            You can also set more than one properties to allign the content to more than one side.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Measure(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Measure the current VisualElement using the specified settings.
            </summary>
            <param name="measure"></param>
            <param name="minSize">If Empty is not used.</param>
            <param name="maxSize">If Empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.OnMeasureContent(DevAge.Drawing.MeasureHelper,System.Drawing.SizeF)">
            <summary>
            Measure the current content of the VisualElement.
            </summary>
            <param name="measure"></param>
            <param name="maxSize">If empty is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF,System.Drawing.RectangleF@)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
            <param name="drawingArea"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            Usually derived class don't override this method but the OnDraw method that automatically check the area to draw.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.GetDrawingArea(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF)">
            <summary>
            Gets the area where the visual element will be drawed.
            </summary>
            <param name="measure"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.OnDraw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Method used to draw the specified content based on the Visual element. 
            This is the method that you must override to draw. The area used is already calculated based on the AnchorArea property.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.GetElementsAtPoint(DevAge.Drawing.MeasureHelper,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Get the element at the specified point. Usually this methods simply return the current element, but an element can return inner elements drawed inside the main elements.
            Returns a list of elements, where the last element is the upper element and the first element is the background element.
            </summary>
            <param name="measure"></param>
            <param name="area"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.VisualElements.VisualElementBase.Clone">
            <summary>
            Clone the current VisualElement.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.ContentAlignment">
            <summary>
            Specifies alignment of content on the drawing surface.
            The same enum as System.Drawing.ContentAlignment. Rewritten for compatibility with the Compact Framework.
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.BottomCenter">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.  
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.BottomLeft">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.  
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.BottomRight">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.MiddleCenter">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.  
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.MiddleLeft">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.  
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.MiddleRight">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.TopCenter">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.  
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.TopLeft">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ContentAlignment.TopRight">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ElementsDrawMode.Covering">
            <summary>
            Draw each element over the previous
            </summary>
        </member>
        <member name="F:DevAge.Drawing.ElementsDrawMode.Align">
            <summary>
            Align each element with the previous if an alignment is specified.
            </summary>
        </member>
        <member name="T:DevAge.Drawing.GraphicsCache">
            <summary>
            A wrapper for the GDI Graphic instance. Contains also a set of class used to cache pens and brushes.
            </summary>
        </member>
        <member name="T:DevAge.Drawing.IBorder">
            <summary>
            Interface for all borders.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.IBorder.Draw(DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the current VisualElement in the specified Graphics object.
            </summary>
            <param name="graphics"></param>
            <param name="area"></param>
        </member>
        <member name="M:DevAge.Drawing.IBorder.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="point"></param>
            <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.MeasureHelper">
            <summary>
            A class to help measure string operations. Remember to call the Dispose method on this class.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.MeasureHelper.#ctor(System.Windows.Forms.Control)">
            <summary>
            Create a graphic object from the current control
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:DevAge.Drawing.MeasureHelper.#ctor(System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="graphics">This object is not automatically disposed.</param>
        </member>
        <member name="M:DevAge.Drawing.MeasureHelper.Dispose">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.Padding.Equals(System.Object)">
            <summary>
            Compare to current padding with another padding.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.PensCache">
            <summary>
            A class used to cache the Pens used by the drawing methods. Use the GetPen method to retrive or insert new pens.
            Remember to call Dispose when you don't need anymore this class to release all graphics resources.
            Usually you don't need to use this class directly but you can acces it using the GraphicsCache class.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.PensCache.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxCapacity">A positive number that specify the capacity of the cache.</param>
        </member>
        <member name="M:DevAge.Drawing.PensCache.GetPen(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Returns the existing Pen object if already exist in the cache, otherwise create it and store in the cache.
            If there aren't anymore free slots (count > capacity) the this method create the pen but don't store it in the cache.
            </summary>
            <param name="color"></param>
            <param name="width"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.PensCache.Dispose">
            <summary>
            Dipose. Release the graphics resources.
            </summary>
        </member>
        <member name="T:DevAge.Drawing.RectangleBorder">
            <summary>
            A struct that represents the borders of a cell. Contains 4 borders: Right, Left, Top, Bottom.
            If you have 2 adjacent cells and want to create a 1 pixel width border, you must set width 1 for one cell and width 0 for the other. Usually a cell has only Right and Bottom border.
            The bottom and top border lines are drawed over the right and left lines.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine)">
            <summary>
            Construct a RectangleBorder with the same border on all the side
            </summary>
            <param name="p_Border"></param>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine)">
            <summary>
            Construct a RectangleBorder with the specified Right and Bottom border and a 0 Left and Top border
            </summary>
            <param name="p_Right"></param>
            <param name="p_Bottom"></param>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.#ctor(DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine,DevAge.Drawing.BorderLine)">
            <summary>
            Construct a RectangleBorder with the specified borders
            </summary>
            <param name="p_Top"></param>
            <param name="p_Bottom"></param>
            <param name="p_Left"></param>
            <param name="p_Right"></param>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.SetColor(System.Drawing.Color)">
            <summary>
            Change the color of the current struct instance and return a copy of the modified struct.
            </summary>
            <param name="p_Color"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.SetDashStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Change the dashStyle of the current struct instance and return a copy of the modified struct.
            </summary>
            <param name="dashStyle"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.SetWidth(System.Int32)">
            <summary>
            Change the width of the current struct instance and return a copy of the modified struct.
            </summary>
            <param name="p_Width"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.SetPadding(System.Int32)">
            <summary>
            Change the width of the current struct instance and return a copy of the modified struct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.Equals(System.Object)">
            <summary>
            Compare to current border with another border.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.CreateInsetBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create an Inset border
            </summary>
            <param name="p_width"></param>
            <param name="p_ShadowColor"></param>
            <param name="p_LightColor"></param>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.CreateRaisedBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create a Raised border
            </summary>
            <param name="p_width"></param>
            <param name="p_ShadowColor"></param>
            <param name="p_LightColor"></param>
        </member>
        <member name="M:DevAge.Drawing.RectangleBorder.GetPointPartType(System.Drawing.RectangleF,System.Drawing.PointF,System.Single@)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="point"></param>
            <param name="distanceFromBorder">Returns the distance of the specified point from the border rectangle. -1 if is not inside the border. Returns a positive value or 0 if inside the border. Consider always the distance from the outer border.</param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.RoundedRectangle">
            <summary>
            Rapresents a rounded rectangle, takes a rectangle and a round value from 0 to 1. Can be converted to a GraphicsPath for drawing operations.
            See also DevAge.Drawing.Utilities.FillRoundedRectangle and DrawRoundedRectangle methods.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.RoundedRectangle.#ctor(System.Drawing.Rectangle,System.Double)">
            <summary>
            Costructor
            </summary>
            <param name="rect">Content rectangle</param>
            <param name="roundValue">The amount to round the rectangle. Can be any vavlues from 0 to 1. Set to 0 to draw a standard rectangle, 1 to have a full rounded rectangle.</param>
        </member>
        <member name="P:DevAge.Drawing.RoundedRectangle.RoundValue">
            <summary>
            The amount to round the rectangle. Can be any values from 0 to 1. Set to 0 to draw a standard rectangle, 1 to have a full rounded rectangle.
            </summary>
        </member>
        <member name="M:DevAge.Drawing.RoundedRectangle.ToGraphicsPath">
            <summary>
            Converts this structure to a GraphicsPath object, used to draw to a Graphics device.
            Consider that you can create a Region with a GraphicsPath object using one of the Region constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Drawing.Utilities">
            <summary>
            A static class with drawing utilities functions
            </summary>
        </member>
        <member name="M:DevAge.Drawing.Utilities.DrawRoundedRectangle(System.Drawing.Graphics,DevAge.Drawing.RoundedRectangle,System.Drawing.Pen)">
            <summary>
            Draw a rounded rectangle with the specified pen.
            </summary>
            <param name="g"></param>
            <param name="roundRect"></param>
            <param name="pen"></param>
        </member>
        <member name="M:DevAge.Drawing.Utilities.FillRoundedRectangle(System.Drawing.Graphics,DevAge.Drawing.RoundedRectangle,System.Drawing.Brush)">
            <summary>
            Fill a rounded rectangle with the specified brush.
            </summary>
            <param name="g"></param>
            <param name="roundRect"></param>
            <param name="brush"></param>
        </member>
        <member name="M:DevAge.Drawing.Utilities.DrawGradient3DBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,DevAge.Drawing.Gradient3DBorderStyle)">
            <summary>
            Draw a 3D border inside the specified rectangle using a linear gradient border color.
            </summary>
            <param name="g"></param>
            <param name="p_HeaderRectangle"></param>
            <param name="p_BackColor"></param>
            <param name="p_DarkColor"></param>
            <param name="p_LightColor"></param>
            <param name="p_DarkGradientNumber">The width of the dark border</param>
            <param name="p_LightGradientNumber">The width of the light border</param>
            <param name="p_Style"></param>
        </member>
        <member name="M:DevAge.Drawing.Utilities.CalculateColorGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Interpolate the specified number of times between start and end color
            </summary>
            <param name="p_StartColor"></param>
            <param name="p_EndColor"></param>
            <param name="p_NumberOfGradients"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.CalculateMiddleColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Calculate the middle color between the start and the end color.
            </summary>
            <param name="p_StartColor"></param>
            <param name="p_EndColor"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.CalculateLightDarkColor(System.Drawing.Color,System.Single)">
            <summary>
            Calculate a darker or lighter color using the source specified.
            A light of 1 is White, a light of -1 is black. All the other values are an interpolation from the source color.
            </summary>
            <param name="source"></param>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.ImageToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the specified image to an array of byte using the specified format.
            </summary>
            <param name="img"></param>
            <param name="imgFormat"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.BytesToImage(System.Byte[])">
            <summary>
            Converts the specified byte array to an Image object.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.CreateDisabledImage(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Create a disabled version of the image.
            </summary>
            <param name="image">The image to convert</param>
            <param name="background">The Color of the background behind the image. The background parameter is used to calculate the fill color of the disabled image so that it is always visible against the background.</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Drawing.Utilities.SizeFToSize(System.Drawing.SizeF)">
            <summary>
            Convert a SizeF structure to a Size structure rounding the value to the largest integer using Ceiling method.
            </summary>
            <param name="sizef"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DevAge.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DevAge.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.ButtonMultiSelection">
            <summary>
            Summary description for ButtonMultiSelection.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.ButtonMultiSelection.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ButtonMultiSelection.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ButtonMultiSelection.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.SubButtonItemCollection">
            <summary>
            A collection of elements of type SubButtonItem
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor">
            <summary>
            Initializes a new empty instance of the SubButtonItemCollection class.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor(DevAge.Windows.Forms.SubButtonItem[])">
            <summary>
            Initializes a new instance of the SubButtonItemCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new SubButtonItemCollection.
            </param>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.#ctor(DevAge.Windows.Forms.SubButtonItemCollection)">
            <summary>
            Initializes a new instance of the SubButtonItemCollection class, containing elements
            copied from another instance of SubButtonItemCollection
            </summary>
            <param name="items">
            The SubButtonItemCollection whose elements are to be added to the new SubButtonItemCollection.
            </param>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.AddRange(DevAge.Windows.Forms.SubButtonItem[])">
            <summary>
            Adds the elements of an array to the end of this SubButtonItemCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this SubButtonItemCollection.
            </param>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.AddRange(DevAge.Windows.Forms.SubButtonItemCollection)">
            <summary>
            Adds the elements of another SubButtonItemCollection to the end of this SubButtonItemCollection.
            </summary>
            <param name="items">
            The SubButtonItemCollection whose elements are to be added to the end of this SubButtonItemCollection.
            </param>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Add(DevAge.Windows.Forms.SubButtonItem)">
            <summary>
            Adds an instance of type SubButtonItem to the end of this SubButtonItemCollection.
            </summary>
            <param name="value">
            The SubButtonItem to be added to the end of this SubButtonItemCollection.
            </param>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Contains(DevAge.Windows.Forms.SubButtonItem)">
            <summary>
            Determines whether a specfic SubButtonItem value is in this SubButtonItemCollection.
            </summary>
            <param name="value">
            The SubButtonItem value to locate in this SubButtonItemCollection.
            </param>
            <returns>
            true if value is found in this SubButtonItemCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.IndexOf(DevAge.Windows.Forms.SubButtonItem)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this SubButtonItemCollection
            </summary>
            <param name="value">
            The SubButtonItem value to locate in the SubButtonItemCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Insert(System.Int32,DevAge.Windows.Forms.SubButtonItem)">
            <summary>
            Inserts an element into the SubButtonItemCollection at the specified index
            </summary>
            <param name="index">
            The index at which the SubButtonItem is to be inserted.
            </param>
            <param name="value">
            The SubButtonItem to insert.
            </param>
        </member>
        <member name="P:DevAge.Windows.Forms.SubButtonItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SubButtonItem at the given index in this SubButtonItemCollection.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.Remove(DevAge.Windows.Forms.SubButtonItem)">
            <summary>
            Removes the first occurrence of a specific SubButtonItem from this SubButtonItemCollection.
            </summary>
            <param name="value">
            The SubButtonItem value to remove from this SubButtonItemCollection.
            </param>
        </member>
        <member name="T:DevAge.Windows.Forms.SubButtonItemCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by SubButtonItemCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.SubButtonItemCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this SubButtonItemCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:DevAge.Windows.Forms.ColorPicker">
            <summary>
            Summary description for ColorPicker.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.ColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.ControlCursor">
            <summary>
            Summary description for ControlCursor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.DevAgeComboBox">
            <summary>
            DevAgeComboBox has a typed Value property and the validating features using the Validator property.
            Set the Validator property and then call the ApplyValidatorRules method.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeComboBox.FormatValue">
            <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control.
            Default false.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeComboBox.Validator">
            <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeComboBox.IsValidValue(System.Object@)">
            <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeComboBox.Value">
            <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeComboBox.ApplyValidatorRules">
            <summary>
            Loads the Items from the StandardValues and the DropDownStyle based on the parameters of the validator.
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.DevAgeMaskedTextBox">
            <summary>
            A TextBox that allows to set the type of value to edit, then you can use the Value property to read and write the specific type.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.FormatValue">
            <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.Validator">
            <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeMaskedTextBox.ApplyValidatorRules">
            <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeMaskedTextBox.IsValidValue(System.Object@)">
            <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeMaskedTextBox.Value">
            <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeNumericUpDown.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeNumericUpDown.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.EffectType">
            <summary>
            Used for subscript and superscript
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.UnderlineStyle">
            <summary>
            Specifies the style of underline that should be
            applied to the text.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.None">
            <summary>
            No underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Normal">
            <summary>
            Standard underlining across all words.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Word">
            <summary>
            Standard underlining broken between words.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Double">
            <summary>
            Double line underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Dotted">
            <summary>
            Dotted underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Dash">
            <summary>
            Dashed underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.DashDot">
            <summary>
            Dash-dot ("-.-.") underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.DashDotDot">
            <summary>
            Dash-dot-dot ("-..-..") underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Wave">
            <summary>
            Wave underlining (like spelling mistakes in MS Word).
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.Thick">
            <summary>
            Extra thick standard underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.HairLine">
            <summary>
            Extra thin standard underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.DoubleWave">
            <summary>
            Double thickness wave underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.HeavyWave">
            <summary>
            Thick wave underlining.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineStyle.LongDash">
            <summary>
            Extra long dash underlining.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.UnderlineColor">
            <summary>
            Specifies the color of underline that should be
            applied to the text.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Black">
            <summary>Black.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Blue">
            <summary>Blue.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Cyan">
            <summary>Cyan.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.LimeGreen">
            <summary>Lime green.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Magenta">
            <summary>Magenta.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Red">
            <summary>Red.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Yellow">
            <summary>Yellow.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.White">
            <summary>White.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkBlue">
            <summary>DarkBlue.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkCyan">
            <summary>DarkCyan.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Green">
            <summary>Green.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkMagenta">
            <summary>Dark magenta.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Brown">
            <summary>Brown.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.OliveGreen">
            <summary>Olive green.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.DarkGray">
            <summary>Dark gray.</summary>
        </member>
        <member name="F:DevAge.Windows.Forms.UnderlineColor.Gray">
            <summary>Gray.</summary>
        </member>
        <member name="T:DevAge.Windows.Forms.RichText">
            <summary>
            Class which contains a rich text string.
            Used to distinguish between string and rich text
            as normally rich text is also a string.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.RichText.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtf"></param>
        </member>
        <member name="M:DevAge.Windows.Forms.RichText.#ctor(DevAge.Windows.Forms.RichText)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="F:DevAge.Windows.Forms.RichText.m_Rtf">
            <summary>
            RichText
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.RichText.CompareTo(System.Object)">
            <summary>
            Compare this instance with a specified RichText object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Windows.Forms.RichText.CompareTo(DevAge.Windows.Forms.RichText)">
            <summary>
            Compare this instance with a specified RichText.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Windows.Forms.RichText.ToString">
            <summary>
            Return richtext as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Windows.Forms.RichTextConversion">
            <summary>
            RichText conversion methods
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.RichTextConversion.StringToRichText(System.String)">
            <summary>
            Convert plain text to rtf
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Windows.Forms.RichTextConversion.StringToRichText(System.String,System.Drawing.FontStyle)">
            <summary>
            Convert plain text to rtf with font style
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Windows.Forms.RichTextConversion.RichTextToString(DevAge.Windows.Forms.RichText)">
            <summary>
            Convert rtf to plain text
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Windows.Forms.DevAgeRichTextBox">
            <summary>
            A RichTextBox that allows to set the type of value to edit,
            then you can use the Value property to read and write the specific type.
            Furthermore, it is possible to format single characters.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionUnderlineStyle">
            <summary>
            Gets or sets the underline style to apply to the
            current selection or insertion point.
            </summary>
            <remarks>
            Underline styles can be set to any value of the
            <see cref="T:DevAge.Windows.Forms.UnderlineStyle"/> enumeration.
            </remarks>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionUnderlineColor">
            <summary>
            Gets or sets the underline color to apply to the
            current selection or insertion point.
            </summary>
            <remarks>
            Underline colors can be set to any value of the
            <see cref="T:DevAge.Windows.Forms.UnderlineColor"/> enumeration.
            </remarks>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.SelectionEffect">
            <summary>
            Set the effect of the selected text
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionSuper">
            <summary>
            Set the selection to superscript
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionSub">
            <summary>
            Set the selection to subscript
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.SetSelectionNormal">
            <summary>
            Set the selection to normal
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.Validator">
            <summary>
            Gets or sets the Validator class useded to validate the value
            and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of
            the Validator directly to the ComboBox, for example the list of values.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.ApplyValidatorRules">
            <summary>
            Apply the current Validator rules. This method is automatically
            fired when the Validator changed.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.IsValidValue(DevAge.Windows.Forms.RichText@)">
            <summary>
            Check if the selected value is valid based on the
            current validator and returns the value.
            </summary>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.Value">
            <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is null the Text property is used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.BeginUpdate">
            <summary>
            Maintains performance while updating.
            </summary>
            <remarks>
            <para>
            It is recommended to call this method before doing
            any major updates that you do not wish the user to
            see. Remember to call EndUpdate when you are finished
            with the update. Nested calls are supported.
            </para>
            <para>
            Calling this method will prevent redrawing. It will
            also setup the event mask of the underlying richedit
            control so that no events are sent.
            </para>
            </remarks>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.EndUpdate">
            <summary>
            Resumes drawing and event handling.
            </summary>
            <remarks>
            This method should be called every time a call is made
            made to BeginUpdate. It resets the event mask to it's
            original value and enables redrawing of the control.
            </remarks>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeRichTextBox.InternalUpdating">
            <summary>
            Returns true when the control is performing some 
            internal updates
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.AppendText(System.String,System.Drawing.FontStyle)">
            <summary>
            Append a text with the specified fontstyle to the rich text box
            </summary>
            <param name="text">plain text to append</param>
            <param name="fontStyle">the fontstyle for the appended text</param>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.RemoveFormats(System.Boolean)">
            <summary>
            Remove all formatting, optionally with tabs and line breaks
            </summary>
            <param name="withWhitespaces">true with tabs and line breaks</param>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeRichTextBox.MeasureTextBoxContent(System.Drawing.Font)">
            <summary>
            Measure the content of the text box
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevAge.Windows.Forms.DevAgeTextBox">
            <summary>
            A TextBox that allows to set the type of value to edit, then you can use the Value property to read and write the specific type.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBox.FormatValue">
            <summary>
            Gets or sets a property to enable or disable the automatic format of the Text when validating the control
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBox.Validator">
            <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBox.ApplyValidatorRules">
            <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBox.IsValidValue(System.Object@)">
            <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBox.Value">
            <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.DevAgeTextBoxButton">
            <summary>
            A textBox with a button on the right.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.DevAgeTextBoxButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Validator">
            <summary>
            Gets or sets the Validator class useded to validate the value and convert the text when using the Value property.
            You can use the ApplyValidatorRules method to apply the settings of the Validator directly to the ComboBox, for example the list of values.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.ApplyValidatorRules">
            <summary>
            Apply the current Validator rules. This method is automatically fired when the Validator change.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.ShowDialog">
            <summary>
            Show the dialog
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Button">
            <summary>
            The button in the right of the editor
            </summary>
        </member>
        <member name="E:DevAge.Windows.Forms.DevAgeTextBoxButton.DialogOpen">
            <summary>
            Fired when showing the drop down
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.OnDialogOpen(System.EventArgs)">
            <summary>
            Fired when showing the drop down
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:DevAge.Windows.Forms.DevAgeTextBoxButton.DialogClosed">
            <summary>
            Fired when closing the dropdown
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.OnDialogClosed(System.EventArgs)">
            <summary>
            Fired when closing the dropdown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.Windows.Forms.DevAgeTextBoxButton.IsValidValue(System.Object@)">
            <summary>
            Check if the selected value is valid based on the current validator and returns the value.
            </summary>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.Windows.Forms.DevAgeTextBoxButton.Value">
            <summary>
            Gets or sets the typed value for the control, using the Validator class.
            If the Validator is ull the Text property is used.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.DropDown">
            <summary>
            Summary description for DropDownCustom.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.DropDown.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DropDown.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Form)">
            <summary>
            Constructor to create a dropdown form used to display the innerControl specified.
            It is responsability of the caller to dispose the innerControl.
            </summary>
            <param name="innerControl"></param>
            <param name="parentControl"></param>
            <param name="owner"></param>
        </member>
        <member name="M:DevAge.Windows.Forms.DropDown.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DropDown.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.DropDownFlags.CloseOnEscape">
            <summary>
            Close the DropDown whe the user press the escape key, return DialogResult.Cancel
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.DropDownFlags.CloseOnEnter">
            <summary>
            Close the DropDown whe the user press the enter key, return DialogResult.OK
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.DropDownButton">
            <summary>
            Summary description for DropDownButton.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.DropDownButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DropDownButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.DropDownButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.EditableControlBase">
            <summary>
            Summary description for EditableControlBase.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.EditableControlBase.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.EditableControlBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.EditableControlBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.ErrorDialog">
            <summary>
            A Windows Forms Form that can be used to display a dialog similar to a message box to show an exception.
            Can be used to show the Exception.Message, call stack and inner exception by clicking on the Details link.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.ErrorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ErrorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ErrorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.ErrorDialogDetails">
            <summary>
            Summary description for ErrorDialogDetails.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.ErrorDialogDetails.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ErrorDialogDetails.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ErrorDialogDetails.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.FormBase">
            <summary>
            Summary description for FormPosition.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.FormBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.FormBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.FormBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.HeaderGroupBox">
            <summary>
            Summary description for HeaderGroupBox.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.ImageNavigator">
            <summary>
            Summary description for ImageNavigator.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.ImageNavigator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ImageNavigator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.ImageNavigator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.Line">
            <summary>
            Summary description for Line.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.Line.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.Line.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.Line.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.LinkLabel">
            <summary>
            A LinkLabel with Image support and round border support.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.LinkLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.LinkLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.LinkLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.Image">
            <summary>
            The default image to draw
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.MouseOverImage">
            <summary>
            Specifies the image to display when the mouse is inside the link area. If null is used the normal image.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.DisabledImage">
            <summary>
            Specifies the image to display when the link is disabled.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.BorderWidth">
            <summary>
            Gets or sets the width of the border. If 0 no border is drawed.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.BorderRound">
            <summary>
            Round amount. If 0 the border is a not rounded.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.LinkLabel.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="F:DevAge.Windows.Forms.SaveFlags.ActiveMDIMaximized">
            <summary>
            Indicates to save all the childs form of a MDI window with the state of the active child window if this window is maximized. This flag allow to reopen all the child form maximized if you close the form MDI parent with a maximized mdi child.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.PositionRecorderIsolatedStorage">
            <summary>
            A class that can be used to save into the isolated storage the position and the state of a Windows Forms control.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.TextBoxUITypeEditor">
            <summary>
            A TextBoxTypedButton that uase the UITypeEditor associated with the type.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.TextBoxUITypeEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevAge.Windows.Forms.TextBoxUITypeEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevAge.Windows.Forms.TextBoxUITypeEditor.UITypeEditor">
            <summary>
            Gets or sets the UITypeEditor to use. If you have specified a validator the TypeDescriptor.GetEditor method is used based on the Validator.ValueType.
            </summary>
        </member>
        <member name="T:DevAge.Windows.Forms.Utilities">
            <summary>
            Summary description for Utilities.
            </summary>
        </member>
        <member name="T:DevAge.Collections.ListByType`1">
            <summary>
            A collection of object with a special method that returns an object compatible with a specified Type, GetByType(Type).
            </summary>
        </member>
        <member name="M:DevAge.Collections.ListByType`1.GetByType(System.Type)">
            <summary>
            Returns an object of the list that is compatible from the specified type. 
            The Type is compared using the IsAssignableFrom method. If there isn't a compatible object returns null.
            </summary>
            <param name="searchType"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Configuration.CommandLineArgs">
            <summary>
            Description résumée de Arguments.
            </summary>
        </member>
        <member name="T:DevAge.Configuration.PersistableItemDictionary">
            <summary>
            A dictionary with keys of type String and values of type PersistableItem
            </summary>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the PersistableItemDictionary class
            </summary>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Item(System.String)">
            <summary>
            Gets or sets the PersistableItem associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Add(System.String,DevAge.Configuration.PersistableItem)">
            <summary>
            Adds an element with the specified key and value to this PersistableItemDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The PersistableItem value of the element to add.
            </param>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Contains(System.String)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsValue(DevAge.Configuration.PersistableItem)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific value.
            </summary>
            <param name="value">
            The PersistableItem value to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this PersistableItemDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this PersistableItemDictionary.
            </summary>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Values">
            <summary>
            Gets a collection containing the values in this PersistableItemDictionary.
            </summary>
        </member>
        <member name="T:DevAge.Configuration.PersistableSettings">
            <summary>
            Summary description for PersistableSettings.
            </summary>
        </member>
        <member name="M:DevAge.Configuration.PersistableSettings.ReadFromOther(DevAge.Configuration.PersistableSettings)">
            <summary>
            Clone all fields using the ValueToString and StringToValue methods
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:DevAge.Data.DataSetHelper">
            <summary>
            Utilities for DataSet class. Contains some methods to create expression string, for Select and Epression methods and methods for selecting data like SelectDistinct.
            </summary>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.DateTime)">
            <summary>
            Create a string with this format: #MM/dd/yyyy# . This is the default format for DataSet expressions. Can be used for example with the DataTable.Select method.
            </summary>
            <param name="p_Date"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Int32)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Int64)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Single)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Double)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Decimal)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Boolean)">
            <summary>
            Create a string with an InvariantCulture format.
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.String)">
            <summary>
            Replace any special sql character (like single quote) and replace it with the valid sql equivalent. Then add the appropriate quote if the type require (string).
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Char)">
            <summary>
            Replace any special sql character (like single quote) and replace it with the valid sql equivalent. Then add the appropriate quote if the type require (string).
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.DBNull)">
            <summary>
            Return NULL
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ExpressionFormat(System.Object)">
            <summary>
            Format the specified value in a string that can be used inside an expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.LikeExpression(System.String,System.String)">
            <summary>
            Create a like expression for string values, automatically calls FormatValueForExpression
            </summary>
            <param name="pFieldName"></param>
            <param name="pFieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.StartWithExpression(System.String,System.String)">
            <summary>
            Create a start with expression for stirng value, automatically calls FormatValueForExpression
            </summary>
            <param name="pFieldName"></param>
            <param name="pFieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.EqualExpression(System.String,System.Object)">
            <summary>
            Create an equal expression, automatically calls FormatValueForExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.NotEqualExpression(System.String,System.Object)">
            <summary>
            Create a Not equal expression, automatically calls FormatValueForExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.ValEquals(System.Object,System.Object)">
            <summary>
            Compares two values to see if they are equal. Also compares DBNULL.Value.
            Note: If your DataTable contains object fields, then you must extend this
            function to handle them in a meaningful way if you intend to group on them.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.Eval(System.String,System.Object[])">
            <summary>
            Evaluate the given expression using the Compute method of a empty DataTable. Replace the parameters using the string.Format method ({0} syntax)
            </summary>
            <param name="expression"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Data.DataSetHelper.EvalRowExpression(System.Data.DataRow,System.String)">
            <summary>
            Evaluate the given expression using the Compute method of an empty DataTable replacing the values of the specified Row.
            </summary>
            <param name="row"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Data.FileDataSet">
            <summary>
            Summary description for Manager.
            </summary>
        </member>
        <member name="P:DevAge.Data.FileDataSet.SaveDataFormat">
            <summary>
            Gets or Sets the format used to save the DataSet
            </summary>
        </member>
        <member name="P:DevAge.Data.FileDataSet.FileDataFormat">
            <summary>
            Gets the current format of the File where the data are loaded.
            </summary>
        </member>
        <member name="P:DevAge.Data.FileDataSet.MergeReadedSchema">
            <summary>
            Gets or Sets if merge the schema of the file with the schema of the DataSet specified. Use true if the DataSet doesn't have a schema definition. Default is false.
            </summary>
        </member>
        <member name="T:DevAge.Data.SqlClient.SqlCommandBuilder">
            <summary>
            This class is similar to the System.Data.SqlClient.SqlCommandBuilder, but use only the DataTable to create the required commands.
            Don't support identity (autoincrement) column and only the base data type. This class don't use the data source to explore the data but only the DataTable informations.
            So you must populate the PrimaryKeys of the DataSet. I suggest to use GUID column (uniqueidentifier) to replace the identity column.
            Remember to set the Connection of the generated command.
            </summary>
        </member>
        <member name="M:DevAge.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.DataTable)">
            <summary>
            Constructor
            </summary>
            <param name="dataTable">table used to create commands</param>
        </member>
        <member name="P:DevAge.Data.SqlClient.SqlCommandBuilder.DataTable">
            <summary>
            Table used to create commands
            </summary>
        </member>
        <member name="T:DevAge.Data.StreamDataSet">
            <summary>
            A static class used to serialize a DataSet to and from a stream using a binary or xml format.
            The xml format use the standard DataSet xml serialization, the binary format use a custom format.
            </summary>
        </member>
        <member name="M:DevAge.Data.StreamDataSet.Write(System.IO.Stream,System.Data.DataSet,DevAge.Data.StreamDataSetFormat)">
            <summary>
            Write the dataset to the stream using the specified format.
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="format"></param>
        </member>
        <member name="M:DevAge.Data.StreamDataSet.Read(System.IO.Stream,System.Data.DataSet,DevAge.Data.StreamDataSetFormat,System.Boolean)">
            <summary>
            Read from the stream and populate the dataset using the specified format.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="format"></param>
            <param name="mergeSchema">True to merge the schema, otherwise it is used the schema of the dataset</param>
        </member>
        <member name="T:DevAge.Data.StreamDataSetFormat">
            <summary>
            Enum to control the serialization format
            </summary>
        </member>
        <member name="F:DevAge.Data.StreamDataSetFormat.XML">
            <summary>
            Standard xml format used by the ReadXml and WriteXml of the DataSet 
            </summary>
        </member>
        <member name="F:DevAge.Data.StreamDataSetFormat.Binary">
            <summary>
            Custom binary format. More compact of the xml but not human readable
            </summary>
        </member>
        <member name="T:DevAge.Data.BinaryDataSetInvalidException">
            <summary>
            Binary data not valid exception
            </summary>
        </member>
        <member name="M:DevAge.Data.BinaryDataSetInvalidException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.Data.BinaryDataSetInvalidException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="p_InnerException"></param>
        </member>
        <member name="T:DevAge.Data.BinaryDataSetVersionException">
            <summary>
            Version not valid exception
            </summary>
        </member>
        <member name="M:DevAge.Data.BinaryDataSetVersionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.Data.BinaryDataSetVersionException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="p_InnerException"></param>
        </member>
        <member name="T:DevAge.DateTimeHelper">
            <summary>
            Summary description for DateTimeHelper.
            </summary>
        </member>
        <member name="M:DevAge.DateTimeHelper.YearsDifference(System.DateTime,System.DateTime)">
            <summary>
            Calculate the difference in years of 2 dates. Usually used for age calculations. dateA - dateB
            </summary>
            <param name="dateA"></param>
            <param name="dateB"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.DateTimeHelper.MonthsDifference(System.DateTime,System.DateTime)">
            <summary>
            Calculate the difference in months of 2 dates. dateA - dateB
            </summary>
            <param name="dateA"></param>
            <param name="dateB"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.DevAgeApplicationException">
            <summary>
            Generic DevAge Exception
            </summary>
        </member>
        <member name="M:DevAge.DevAgeApplicationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="p_strErrDescription"></param>
        </member>
        <member name="M:DevAge.DevAgeApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="p_strErrDescription"></param>
            <param name="p_InnerException"></param>
        </member>
        <member name="M:DevAge.DevAgeApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="p_Info"></param>
            <param name="p_StreamingContext"></param>
        </member>
        <member name="T:DevAge.TypeNotSupportedException">
            <summary>
            The type specified it is not supported in the current contest
            </summary>
        </member>
        <member name="M:DevAge.TypeNotSupportedException.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="pType"></param>
        </member>
        <member name="M:DevAge.TypeNotSupportedException.#ctor(System.Type,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="pType"></param>
            <param name="p_InnerException"></param>
        </member>
        <member name="T:DevAge.UnrecognizedCommandLineParametersException">
            <summary>
            Command line not valid exception
            </summary>
        </member>
        <member name="M:DevAge.UnrecognizedCommandLineParametersException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:DevAge.UnrecognizedCommandLineParametersException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="parameter"></param>
            <param name="p_InnerException"></param>
        </member>
        <member name="T:DevAge.ConversionErrorException">
            <summary>
            Conversion exception
            </summary>
        </member>
        <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="destinationType"></param>
            <param name="value"></param>
            <param name="extendedMessage"></param>
        </member>
        <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="destinationType"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevAge.ConversionErrorException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="destinationType"></param>
            <param name="value"></param>
            <param name="p_InnerException"></param>
        </member>
        <member name="T:DevAge.ExceptionEventArgs">
            <summary>
            Common EventArgs class used to store and raise events with an Exception associated
            </summary>
        </member>
        <member name="M:DevAge.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:DevAge.ExceptionEventArgs.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:DevAge.ExceptionEventHandler">
            <summary>
            Common EventHandler class used to raise events with an Exception associated
            </summary>
        </member>
        <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingBase">
            <summary>
            Abstract class that help to save settings in the isolated storage
            </summary>
        </member>
        <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingVersionBase">
            <summary>
            Summary description for IsolatedStorageSettingVersionBase.
            </summary>
        </member>
        <member name="T:DevAge.IO.StreamPersistence">
            <summary>
            A static class to help save and read stream data
            </summary>
        </member>
        <member name="T:DevAge.Patterns.IActivity">
            <summary>
            An interface to represents a basic activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.IActivity.Start(DevAge.Patterns.IActivityEvents)">
            <summary>
            Start the activity and all sub activities.
            </summary>
            <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
        </member>
        <member name="M:DevAge.Patterns.IActivity.Cancel">
            <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.SubActivities">
            <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Status">
            <summary>
            Activity status
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Name">
            <summary>
            Name of the activity used to describe the class.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.WaitHandle">
            <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Exception">
            <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Parent">
            <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.FullName">
            <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.DoNotWait">
            <summary>
            Don't wait the sub activities to finish (parallel processing, asyncronous)
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitOnEach">
            <summary>
            Wait for each sub activities (syncronous)
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitAtTheEnd">
            <summary>
            Wait all the sub activities at the end (parallel processing but syncronized with the parent)
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityBase">
            <summary>
            Base activity class. Override the OnWork method to customize the activity.
            </summary>
        </member>
        <member name="F:DevAge.Patterns.ActivityBase.mActivityCount">
            <summary>
            An activity count used only to generate a seguential name
            </summary>
        </member>
        <member name="F:DevAge.Patterns.ActivityBase.mWaitHandle">
            <summary>
            Initially set to signaled=true=completed, nonsignaled=false=notcompleted,
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivitiesTimeOut">
            <summary>
            Gets or sets the time to wait for the sub activities. If the operation is still executing then a TimeOutException is fired. Default is System.Threading.Timeout.Infinite. Default is true.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.PropagateException">
            <summary>
            Gets or sets if propagate an exception from sub activities to the current activities. Default is true.
            Only valid SubActivitiesTimeOut is WaitOnEach or WaitAtTheEnd
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivityWaitMode">
            <summary>
            Gets or sets how the current activity wait the completition of the sub activities.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.ResetRunningStatus">
            <summary>
            Reset the status property to the original values. If the activity is still running an exception is throw.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.OnWork">
            <summary>
            Working method. Abstract. Override this method to provide a specific work for the activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.DoWork">
            <summary>
            Internal work method. Call the OnWork method and Start the SubActivities.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.WaitActivities(DevAge.Patterns.ActivityCollection,System.Int32)">
            <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
            <param name="activities"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.WaitActivity(DevAge.Patterns.IActivity,System.Int32)">
            <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
            <param name="activity"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.CheckActivitiesException(DevAge.Patterns.ActivityCollection)">
            <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
            <param name="activities"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.CheckActivityException(DevAge.Patterns.IActivity)">
            <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
            <param name="activity"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.StartActivity">
            <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnWork method to implement the specific activity work.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.Start(DevAge.Patterns.IActivityEvents)">
            <summary>
            Start the activity. If the activity is already running an exception is throw.
            To override the common working code use the OnWork abstract method.
            </summary>
            <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.Cancel">
            <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivities">
            <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Status">
            <summary>
            Activity status
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Name">
            <summary>
            Name of the activity used to describe the class.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.WaitHandle">
            <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Exception">
            <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Parent">
            <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.FullName">
            <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
        </member>
        <member name="T:DevAge.Patterns.Activity">
            <summary>
            An activity used as a container for other activities using a syncronized code.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.AsynchronousActivity">
            <summary>
            An activity used as a container for other activities using an asynchronous code.
            Override the OnAsyncWork method for custom asynchronous work.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCollection">
            <summary>
            A collection of elements of type Activity
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.#ctor(DevAge.Patterns.IActivity)">
            <summary>
            Initializes a new empty instance of the ActivityCollection class.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Contains(DevAge.Patterns.IActivity)">
            <summary>
            Determines whether a specfic IActivity value is in this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity value to locate in this ActivityCollection.
            </param>
            <returns>
            true if value is found in this ActivityCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.IndexOf(DevAge.Patterns.IActivity)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ActivityCollection
            </summary>
            <param name="value">
            The IActivity value to locate in the ActivityCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Add(DevAge.Patterns.IActivity)">
            <summary>
            Adds an instance of type IActivity to the end of this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity to be added to the end of this ActivityCollection.
            </param>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Insert(System.Int32,DevAge.Patterns.IActivity)">
            <summary>
            Inserts an element into the ActivityCollection at the specified index
            </summary>
            <param name="index">
            The index at which the IActivity is to be inserted.
            </param>
            <param name="value">
            The IActivity to insert.
            </param>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Remove(DevAge.Patterns.IActivity)">
            <summary>
            Removes the first occurrence of a specific IActivity from this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity value to remove from this ActivityCollection.
            </param>
        </member>
        <member name="P:DevAge.Patterns.ActivityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IActivity at the given index in this ActivityCollection.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ActivityCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ActivityCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:DevAge.Patterns.IActivityEvents">
            <summary>
            Interface to receive the callback for the activity events.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityStarted(DevAge.Patterns.IActivity)">
            <summary>
            Fired when the activity is started
            </summary>
            <param name="sender">Activity that have sended the event</param>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityCompleted(DevAge.Patterns.IActivity)">
            <summary>
            Fired when the activity is completed
            </summary>
            <param name="sender">Activity that have sended the event</param>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityException(DevAge.Patterns.IActivity,System.Exception)">
            <summary>
            Fired when the activity or one of its children throws an exception
            </summary>
            <param name="sender">Activity that have sended the event</param>
            <param name="exception"></param>
        </member>
        <member name="T:DevAge.Patterns.IAsyncActivity">
            <summary>
            Interface for asyncronuos activity. Extend the IActivity interface
            </summary>
        </member>
        <member name="T:DevAge.Patterns.AsyncActivityBase">
            <summary>
            Base activity class. Override the OnBeginWork and OnEndWork method to customize the activity.
            This class support an asyncronous activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnBeginWork(System.AsyncCallback)">
            <summary>
            Begind working method. Called to start the asyncronous activity. Abstract.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnEndWork(System.IAsyncResult)">
            <summary>
            End working method. Called when the asyncronous operation is finished
            </summary>
            <param name="asyncResult">AsyncResult</param>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnWork">
            <summary>
            Working method.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.StartActivity">
            <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnBeginWork method to implement the specific activity work.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCanceledException">
            <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCanceledException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityStatusNotValidException">
            <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityStatusNotValidException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevAge.Patterns.TimeOutActivityException">
            <summary>
            Exception fired when a time out is encountered.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.TimeOutActivityException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevAge.Patterns.SubActivityException">
            <summary>
            Exception fired when a time out is encountered.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.SubActivityException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="activityName"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:DevAge.Runtime.Serialization.Utilities">
            <summary>
            Static Class for serialization utilities
            </summary>
        </member>
        <member name="M:DevAge.Runtime.Serialization.Utilities.BinDeserialize(System.IO.Stream)">
            <summary>
            Deserialize the stream. Using BinaryFormatter.
            </summary>
            <param name="p_Stream"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Runtime.Serialization.Utilities.BinSerialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize the stream. Using BinaryFormatter.
            </summary>
            <param name="p_Stream"></param>
            <param name="p_Object"></param>
        </member>
        <member name="M:DevAge.Runtime.Serialization.Utilities.BinDeserialize(System.String)">
            <summary>
            Deserialize the specified file. Using BinaryFormatter.
            </summary>
            <param name="p_strFileName"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Runtime.Serialization.Utilities.BinSerialize(System.String,System.Object)">
            <summary>
            Serialize the object to the specified file. Using BinaryFormatter.
            </summary>
            <param name="p_strFileName"></param>
            <param name="p_Object"></param>
        </member>
        <member name="T:DevAge.Security.Cryptography.Utilities">
            <summary>
            Utilities
            </summary>
        </member>
        <member name="T:DevAge.Security.Cryptography.Utilities.DES">
            <summary>
            Crypt and encrypt methods using DES
            </summary>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.DES.EncryptString(System.String,System.String)">
            <summary>
            Encrypt the specified string using DES
            </summary>
            <param name="p_strInput">String to encrypt</param>
            <param name="p_Key8chars">Must be of 8 characters length</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.DES.DecryptString(System.String,System.String)">
            <summary>
            Decrypt the specified string using DES
            </summary>
            <param name="p_strInput">String to decrypt</param>
            <param name="p_Key8chars">Must be of 8 characters length</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.DES.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Encrypt the specified stream using DES
            </summary>
            <param name="p_StreamInput"></param>
            <param name="p_StreamOutput"></param>
            <param name="p_Key8chars">Must be of 8 characters length</param>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.DES.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Decrypt the specified stream using DES
            </summary>
            <param name="p_StreamInput"></param>
            <param name="p_StreamOutput"></param>
            <param name="p_Key8chars">Must be of 8 characters length</param>
        </member>
        <member name="T:DevAge.Security.Cryptography.Utilities.SHA1">
            <summary>
            Password utilities using SH1 alghoritm
            </summary>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.SHA1.HashPassword(System.String)">
            <summary>
            Hash the string p_Password using SH1 alghoritm (SHA1CryptoServiceProvider). 
            </summary>
            <param name="p_Password"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Security.Cryptography.Utilities.XmlDigitalSign">
            <summary>
            An utility class with some method to signing and verify xml documents
            </summary>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.GenerateKeys(System.String@,System.String@)">
            <summary>
            Generate the keys (public and private)
            </summary>
            <param name="keyPubPri">Public and private key</param>
            <param name="keyPub">Public key</param>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateSignature(System.Xml.XmlDocument,System.String)">
            <summary>
            Create a signature xml element for the specified xml document and private key
            </summary>
            <param name="xmlToSign"></param>
            <param name="keyPubPri">Private+public key</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateSignedDoc(System.Xml.XmlDocument,System.String)">
            <summary>
            Create a signed xml document. Add a signature alement to the specified document using the specified private key.
            </summary>
            <param name="xmlToSign"></param>
            <param name="keyPubPri">Private+public key</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CheckSignature(System.Xml.XmlDocument,System.String)">
            <summary>
            Check the signature of the specified signed document (created with CreateSignedDoc) using the specified public key.
            </summary>
            <param name="signedDoc"></param>
            <param name="keyPub">Public key</param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.GetSignatureFromSignedDoc(System.Xml.XmlDocument)">
            <summary>
            Extract the signature element from the specified signed document.
            </summary>
            <param name="signedDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Security.Cryptography.Utilities.XmlDigitalSign.CreateDocWithoutSignature(System.Xml.XmlDocument)">
            <summary>
            Create a new XmlDocument from the specified signed document removing the signature element.
            </summary>
            <param name="signedDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Shell.MailToProtocol.FormatMailToCommand(System.String[],System.String[],System.String[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="p_To">null if not used</param>
            <param name="p_Cc">null if not used</param>
            <param name="p_Bcc">null if not used</param>
            <param name="p_Subject">null if not used</param>
            <param name="p_Body">null if not used</param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Shell.Utilities">
            <summary>
            Shell utilities
            </summary>
        </member>
        <member name="T:DevAge.Text.FixedLength.FieldAttribute">
            <summary>
            Required attribute to specify the field position and length
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="fieldIndex">Index of the field, 0 based. Each field must have a unique progressive index</param>
            <param name="length">Lenght of the field when readed and writed to the string.</param>
        </member>
        <member name="T:DevAge.Text.FixedLength.ParseFormatAttribute">
            <summary>
            Attribute used to specify additional parse options
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.ParseFormatAttribute.#ctor">
            <summary>
            Constructor. Use one of these properties to customize the format: CultureInfo, DateTimeFormat, NumberFormat, TrimBeforeParse.
            Default is Invariant culture format.
            </summary>
        </member>
        <member name="T:DevAge.Text.FixedLength.ValueMappingAttribute">
            <summary>
            Attribute used to convert a specific value to another value
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.ValueMappingAttribute.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="stringValue">String value</param>
            <param name="fieldValue">Field typed value</param>
        </member>
        <member name="T:DevAge.Text.FixedLength.StandardValueAttribute">
            <summary>
            Attribute used to specify the standard value (mandatory value) for a specific field.
            You can use this attribute for example when you want a particular field to only accept one or more standard values.
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.StandardValueAttribute.#ctor(System.Object)">
            <summary>
            Construcotr
            </summary>
            <param name="standardValue">Required value</param>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldStringConvertException.ObjectToStringForError(System.Object)">
            <summary>
            Returns a string used for error description for a specified object. Usually used when printing the object for the error message when there is a conversion error.
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:DevAge.Text.FixedLength.IField">
            <summary>
            Interface for defining a Field in the FixedLength string
            </summary>
        </member>
        <member name="P:DevAge.Text.FixedLength.IField.Index">
            <summary>
            Index of the field. 0 based.
            </summary>
        </member>
        <member name="P:DevAge.Text.FixedLength.IField.Name">
            <summary>
            Name of the field, used for retriving the field by its name.
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.IField.ValueToString(System.Object)">
            <summary>
            Convert the specified value to a string value valid for this field
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Text.FixedLength.IField.StringToValue(System.String)">
            <summary>
            Convert the specified string value to a value based on the field format.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.Text.FixedLength.Field">
            <summary>
            Class for define a field, implements IField interface.
            </summary>
        </member>
        <member name="T:DevAge.Text.FixedLength.FieldList">
            <summary>
            A dictionary with keys of type string and values of type IField
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.#ctor">
            <summary>
            Initializes a new empty instance of the FieldList class
            </summary>
        </member>
        <member name="P:DevAge.Text.FixedLength.FieldList.Item(System.String)">
            <summary>
            Gets or sets the IField associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.Add(DevAge.Text.FixedLength.IField)">
            <summary>
            Adds an element with the specified key and value to this FieldList.
            </summary>
            <param name="value">
            The IField value of the element to add.
            </param>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.Contains(System.String)">
            <summary>
            Determines whether this FieldList contains a specific key.
            </summary>
            <param name="fieldName">
            The string key to locate in this FieldList.
            </param>
            <returns>
            true if this FieldList contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.ContainsKey(System.String)">
            <summary>
            Determines whether this FieldList contains a specific key.
            </summary>
            <returns>
            true if this FieldList contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.ContainsValue(DevAge.Text.FixedLength.IField)">
            <summary>
            Determines whether this FieldList contains a specific value.
            </summary>
            <param name="value">
            The IField value to locate in this FieldList.
            </param>
            <returns>
            true if this FieldList contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Text.FixedLength.FieldList.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this FieldList.
            </summary>
            <param name="fieldName">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:DevAge.Text.FixedLength.FieldList.Keys">
            <summary>
            Gets a collection containing the keys in this FieldList.
            </summary>
        </member>
        <member name="P:DevAge.Text.FixedLength.FieldList.Values">
            <summary>
            Gets a collection containing the values in this FieldList.
            </summary>
        </member>
        <member name="T:DevAge.Text.FixedLength.LineParser">
            <summary>
            A class for parsing fixed length string and loading the fields into a class.
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.#ctor">
            <summary>
            Constructor. Fill the Fields list fot specify the columns.
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.#ctor(System.Type)">
            <summary>
            Load the parser fields with the properties specified in the type. You must use the FieldAttribute and ParseFormatAttribute to specify additional informations like the field length.
            </summary>
            <param name="lineClassType"></param>
        </member>
        <member name="P:DevAge.Text.FixedLength.LineParser.Fields">
            <summary>
            Gets a collection of fields.
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.Reset">
            <summary>
            Reset the parser
            </summary>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.LoadLine(System.String)">
            <summary>
            Load the specified line in the parser.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.GetValue(System.String)">
            <summary>
            Get a specified field value.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.Text.FixedLength.LineParser.FillLineClass(System.Object)">
            <summary>
            Fill the properties of the specified class with the values of the line has defined by the Fields collection.
            </summary>
            <param name="schemaClass"></param>
            <returns>Returns the same class specified in the schemaClass parameter, this is useful if you have struct or value types.</returns>
        </member>
        <member name="T:DevAge.Text.FixedLength.LineWriter">
            <summary>
            A class used to create fixed lenght string.
            </summary>
        </member>
        <member name="T:SourceGrid.ArrayGrid">
            <summary>
            This class derive from GridVirtual and create a grid bound to an array.
            </summary>
        </member>
        <member name="P:SourceGrid.ArrayGrid.DataSource">
            <summary>
            Gets or sets the data source array used to bind the grid.
            </summary>
        </member>
        <member name="P:SourceGrid.ArrayGrid.ColumnHeader">
            <summary>
            Gets or sets the cell used for the column headers.  Only used when FixedRows is greater than 0.
            </summary>
        </member>
        <member name="P:SourceGrid.ArrayGrid.RowHeader">
            <summary>
            Gets or sets the cell used for the row headers. Only used when FixedColumns is greater than 0.
            </summary>
        </member>
        <member name="P:SourceGrid.ArrayGrid.Header">
            <summary>
            Gets or sets the cell used for the left top position header. Only used when FixedRows and FixedColumns are greater than 0.
            </summary>
        </member>
        <member name="T:SourceGrid.ArrayColumnHeader">
            <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
        </member>
        <member name="T:SourceGrid.ArrayRowHeader">
            <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
        </member>
        <member name="T:SourceGrid.ArrayHeader">
            <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.DataGrid.ColumnHeader">
            <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.DataGrid.RowHeader">
            <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.DataGrid.Header">
            <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Button.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.CellVirtual">
            <summary>
            Represents a CellVirtual in a grid.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor">
            <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor(System.Type)">
            <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Model">
            <summary>
            Represents the model of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.View">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Controller">
            <summary>
            Controller of the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Add the specified controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Remove the specifed controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.FindController(System.Type)">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <param name="pControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.FindController``1">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Editor">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.Copy">
            <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool. Abstract, you must override GetValue and SetValue.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CheckBox.#ctor">
            <summary>
            Constructor of a CheckBox style cell. You must st a valid Model to use this type of cell with this constructor.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.ColumnHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.ColumnHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.AutomaticSortEnabled">
            <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Image">
            <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Image.#ctor">
            <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Link.#ctor">
            <summary>
            Constructor, using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.RichTextBox">
            <summary>
            A Cell with a RichTextBox. This Cell is of type RichText.
            Abstract, you must override GetValue and SetValue.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.RichTextBox.#ctor">
            <summary>
            Constructor of a RichTextBox style cell. You must st a valid Model to use this type of cell with this constructor.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.RowHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.RowHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Button.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="T:SourceGrid.Cells.Cell">
            <summary>
            Represents a Cell in a grid, with Cell.Value support and row/col span. Support also ToolTipText, ContextMenu and Cursor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
            <param name="pType"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,SourceGrid.Cells.Editors.EditorBase)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
            <param name="pEditor"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Column">
            <summary>
            Gets the column of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Row">
            <summary>
            Gets the row of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Range">
            <summary>
            Gets the range of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.DisplayText">
            <summary>
            The string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Value">
            <summary>
            Value of the cell
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Cell.m_Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.ToString">
            <summary>
            ToString method
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Cell.ColumnSpan">
            <summary>
            ColSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.RowSpan">
            <summary>
            RowSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.ToolTipText">
            <summary>
            Gets or sets the tool tip text of the cell. Internally use the Models.ToolTip class.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Image">
            <summary>
            Gets or sets the Image associeted with the Cell. Internally use a Models.Image class.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.CellControl">
            <summary>
            The CellControl class is used to create a cell with a Windows Forms Control inside.
            The CellControl class requires a new Windows Forms control for each cell. Unfortunately Winwods Forms control requires a lot of system resources and with many cells this can cause system fault or out of memory conditions.
            Basically I suggest to use CellControl with no more than 50 cells and only if necessary, usually it is better to use standard cells.
            Another problem with the CellControl class is that it is not integrated well with the rest of the grid (control borders, cell navigation, ...)
            Finally a cell of type CellControl cannot be moved, for example you cannot use sort, move the columns, ... when using a CellControl.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor.
            </summary>
            <param name="control">Control to insert inside the grid</param>
        </member>
        <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control,SourceGrid.LinkedControlScrollMode,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="control">Control to insert inside the grid</param>
            <param name="scrollMode"></param>
            <param name="useCellBorder"></param>
        </member>
        <member name="P:SourceGrid.Cells.CellControl.Control">
            <summary>
            Gets the control associated with this cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CheckBox.#ctor">
            <summary>
            Constrcutor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CheckBox.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Construct a CellCheckBox class with caption and align checkbox in the MiddleLeft, using BehaviorModels.CheckBox.Default
            </summary>
            <param name="caption"></param>
            <param name="checkValue"></param>
        </member>
        <member name="P:SourceGrid.Cells.CheckBox.Checked">
            <summary>
            Checked status (equal to the Value property but returns a bool)
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.CheckBox.Caption">
            <summary>
            Caption of the cell
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.ColumnHeader">
            <summary>
            A cell that rappresent a header of a table. 
            View: Views.ColumnHeader.Default 
            Model: Models.SortableHeader 
            Controllers: Controllers.Unselectable.Default, Controllers.MouseInvalidate.Default, Controllers.Resizable.ResizeWidth, Controllers.SortableHeader.Default 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.AutomaticSortEnabled">
            <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            If you want to use a custom sort you can add a customized Controller or a customized instance of Controllers.SortableHeader.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortableHeaderModel">
            <summary>
            Gets the used SortableHeader model.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortStatus">
            <summary>
            Status of the sort.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortComparer">
            <summary>
            Comparer used.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortStyle">
            <summary>
            Sort style.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.Sort(System.Boolean)">
            <summary>
            Sort the column
            </summary>
            <param name="ascending"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.BindProperty">
            <summary>
            Summary description for BindProperty.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Property">Property of the object that you want to lint to the cell. When the value of the cell changed this behavior call automatically this property.</param>
            <param name="p_LinkObject">Instance of the object to link</param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            OnValueChanged
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.BindValueAtProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Bind the cell's value with the property p_Property of the object p_LinkObject
            when the cell's value change also the property change
            </summary>
            <param name="p_Property">linked property</param>
            <param name="p_LinkObject">Can be null to call static property</param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.UnBindValueAtProperty">
            <summary>
            UnBind the cell with the property
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Button">
            <summary>
            Button controller is used to executed a specific action when the user click on a cell or when the user press the Enter or Space key (using the OnKeyDown event).
            Is normally used with the Link or Button Cell.
            Override the OnExecuted to add your code or use the Executed event.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Button.mLastButton">
            <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system button.
            
            Here are the events executed on a system button:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CellEventDispatcher">
            <summary>
            This controller dispatch each event to the specified cell.
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CellEventDispatcher.Default">
            <summary>
            The default behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when editing is ended
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CheckBox">
            <summary>
            Summary description for BehaviorModelCheckBox. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CheckBox.Default">
            <summary>
            Default behavior checkbox
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Controllers.CheckBox.CheckedChanged">
            <summary>
            An event similar to Windows.Forms.CheckBox.CheckedChanged.
            Fired when value changed
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_bAutoChangeValueOfSelectedCells">Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox.</param>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CheckBox.mLastButton">
            <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system CheckBox.
            
            Here are the events executed on a system checkbox:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.CheckBox.AutoChangeValueOfSelectedCells">
            <summary>
            Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox. Default is false
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.UIChangeChecked(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Toggle the value of the current cell and if AutoChangeValueOfSelectedCells is true of all the selected cells.
            Simulate an edit operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ColumnFocus">
            <summary>
            ColumnFocus controller overrides the OnFocusEntering method and set the Focus on the Column. This controller is usually used on the Column Header when the Sort is disabled.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.ColumnFocus.Default">
            <summary>
            Default controller to select all the column
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ColumnSelector">
            <summary>
            Summary description for FullColumnSelection.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.ColumnSelector.Default">
            <summary>
            Default controller to select all the column
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ControllerBase">
            <summary>
            Implements all the method of the controller interface without any implementation
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ControllerContainer.ControllerList">
            <summary>
            A collection of elements of type IController. Only one instance of the same controller is allowed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.FindController(System.Type)">
            <summary>
            Returns null if not exist
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CustomEvents">
            <summary>
            In this Controller are defined all the events fired by the Controller. Each event has a sender object of type CellContext that you can use to read the cell informations.
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanging">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanged">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.IController">
            <summary>
            Represents a behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseDown(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseUp(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseMove(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseEnter(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyUp(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyDown(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyPress(SourceGrid.CellContext,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Process MouseDoubleClick event. See
            http://msdn.microsoft.com/lt-lt/library/system.windows.forms.control.mousedoubleclick(en-us,VS.80).aspx
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Handles OnMouseClick event. See
            http://msdn.microsoft.com/lt-lt/library/system.windows.forms.control.mouseclick(en-us,VS.80).aspx
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeaving(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeft(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the cell has left the focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntering(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the focus enter in the specified cell.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.CanReceiveFocus(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Returns true if the current cell can receive the focus. If only one behavior return false the return value is false.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragDrop(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragEnter(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragOver(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnGiveFeedback(SourceGrid.CellContext,System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseCursor">
            <summary>
            Allow to customize the cursor of a cell. The cell must implement ICellCursor. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ApplyCursor(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ResetCursor(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Reset the original cursor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseInvalidate">
            <summary>
            A behavior that invalidate the cell on mouse events
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.MouseInvalidate.Default">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseSelection">
            <summary>
            A cell controller used to handle mouse selection
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.MouseSelection.MouseButtons">
            <summary>
            Controls which mouse buttons invoke mouse selection.
            Default is MouseButtons.Left
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseSelection.OnMouseMove(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used for mouse multi selection and mouse scrolling
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseSelection.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Ends scroll tracking on double click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseSelection.BeginScrollTracking(SourceGrid.GridVirtual)">
            <summary>
            Start the timer to scroll the visible area
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseSelection.EndScrollTracking">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Resizable">
            <summary>
            Implement the mouse resize features of a cell. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeBoth">
            <summary>
            Resize both width nd height behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeWidth">
            <summary>
            Resize width behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeHeight">
            <summary>
            Resize height behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.LogicalBorder">
            <summary>
            Border used to calculate the region where the resize is enabled.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.Resizable.#ctor(SourceGrid.CellResizeMode)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.ResizeMode">
            <summary>
            Resize mode of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.IsWidthResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell width
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.IsHeightResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell height
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.RichTextBox">
            <summary>
            Implementation RichTextBox behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.RichTextBox.Default">
            <summary>
            Default behavior RichTextBox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.RichTextBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.RichTextBox.OnValueChanging(SourceGrid.CellContext,SourceGrid.ValueChangeEventArgs)">
            <summary>
            If ValueEventArgs is a font, use it to change SelectionFont
            If String, assign it as rtf
            If Int32, assign it as offset
            If HorizontalAlignment, assign as SelectionAlignment
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.RowFocus">
            <summary>
            RowFocus controller overrides the OnFocusEntering method and set the Focus on the Row. This controller is usually used on the Row Header. This controller also add an arror Cursor when the mouse is over the cell.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.RowFocus.Default">
            <summary>
            Default controller to select all the row
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.RowFocus.LogicalBorder">
            <summary>
            Border used to calculate the region to enable the row selection
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.RowSelector">
            <summary>
            Summary description for FullColumnSelection.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.RowSelector.Default">
            <summary>
            Default controller to select all the column
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.SortableHeader">
            <summary>
            A behavior that support sort and resize. Once created cannot be modified. When calculated automatically the range to sort is all the grid range without the rows minor of the current row and the range header is all the grid range with the rows minor or equal of the current row
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.Default">
            <summary>
            Column header behavior with sort and resize support, same as SortResizeHeader.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.LogicalBorder">
            <summary>
            Border used to calculate the region where the sort is enabled.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.#ctor(SourceGrid.IRangeLoader,SourceGrid.IRangeLoader)">
            <summary>
            Constructor
            </summary>
            <param name="p_RangeToSort">If null then the range is automatically calculated.</param>
            <param name="p_HeaderRange">If null then the range is automatically calculated.</param>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_RangeToSort">
            <summary>
            Range to sort
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_HeaderRange">
            <summary>
            Header range (can be null).
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeToSort">
            <summary>
            Range to sort. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeHeader">
            <summary>
            Header range. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.IsSortEnable(SourceGrid.CellContext)">
            <summary>
            Indicates if for the specified cell the sort is enabled.
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.SortColumn(SourceGrid.CellContext,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort the current column. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="sender"></param>
            <param name="p_bAscending"></param>
            <param name="p_Comparer"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.StandardBehavior">
            <summary>
            Common behavior of the cell. 
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.StandardBehavior.Default">
            <summary>
            The default behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when editing is ended
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ToolTipText">
            <summary>
            Allow to customize the tooltiptext of a cell. This class read the tooltiptext from the ICellToolTipText.GetToolTipText.  This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.ToolTipText.Default">
            <summary>
            Default tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ApplyToolTipText(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ResetToolTipText(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Reset the original cursor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Unselectable">
            <summary>
            Implements a behavior that cannot receive the focus. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.ComboBox">
            <summary>
            Editor for a ComboBox (using DevAgeComboBox control)
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type,System.Collections.ICollection,System.Boolean)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
            <param name="p_StandardValues"></param>
            <param name="p_StandardValueExclusive">True to not allow custom value, only the values specified in the standardvalues collection are allowed.</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.ComboBox.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.DateTimePicker">
            <summary>
            Create an Editor that use a DateTimePicker as control for date editing.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.DateTimePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.EditorBase">
            <summary>
            Represents the base class of a DataModel. This DataModel support conversion but doesn't provide any user interface editor.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate StringEditor property
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCellContext">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCell">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditPosition">
            <summary>
            Cell in editing, if Empty no cell is in editing state
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SetEditCell(SourceGrid.CellContext)">
            <summary>
            Set the current editing cell, for an editor only one cell can be in editing state
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="F:SourceGrid.Cells.Editors.EditorBase.m_ErrorString">
            <summary>
            Error rappresentation
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.IsErrorString(System.String)">
            <summary>
            Returns true if the string passed is equal to the error string rappresentation
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.ErrorString">
            <summary>
            String used when error occurred
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableEdit">
            <summary>
            Enable or disable the cell editor (if disable no visual edit is allowed)
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditableMode">
            <summary>
            Mode to edit the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableCellDrawOnEdit">
            <summary>
            Indicates if the draw of the cell when in editing mode is enabled.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.UseCellViewProperties">
            <summary>
            Gets or sets if the editor must assign to the editor control the default view properties: ForeColor, BackColor, Font. This can be disabled if you want to manually assign these properties to the control.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.IsEditing">
            <summary>
            Indicates if the current editor is in editing state
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalStartEdit(SourceGrid.CellContext)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
            <param name="cellContext">Cell to start edit</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.ApplyEdit">
            <summary>
            Apply edited value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalEndEdit(System.Boolean)">
            <summary>
            Cancel the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
            <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.GetEditedValue">
            <summary>
            Returns the new value edited with the custom control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.ClearCell(SourceGrid.CellContext)">
            <summary>
            Clear the value of the cell using the default value
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SetCellValue(SourceGrid.CellContext,System.Object)">
            <summary>
            Change the value of the cell applying the rule of the current editor. Is recommend to use this method to simulate a edit operation and to validate the cell value using the current model.
            Doesn't call the StartEdit and EndEdit but change directly the cell value. Use the CellContext.Start edit to begin an edit operation.
            </summary>
            <param name="cellContext">Cell to change the value</param>
            <param name="p_NewValue"></param>
            <returns>returns true if the value passed is valid and has been applied to the cell</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidated(SourceGrid.CellContextEventArgs)">
            <summary>
            Functions used when the validating operation is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidating(SourceGrid.ValidatingCellEventArgs)">
            <summary>
            Validating the value of the cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.Validating">
            <summary>
            Validating event
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.Validated">
            <summary>
            Validated event
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.EditException">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnEditException(SourceGrid.ExceptionEventArgs)">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SendCharToEditor(System.Char)">
            <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.GetMinimumSize(SourceGrid.CellContext)">
            <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.EditorControlBase">
            <summary>
            The base class for all the editors that have a control
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Control">
            <summary>
            The Control used to edit the Cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Grid">
            <summary>
            The grid used by this editor. Null if the editor is not attached on a grid.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.CreateControl">
            <summary>
            Abstract method that must create a new Control used for the editing operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.IsControlAttached">
            <summary>
            Check if the Control is attached to a grid.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.AttachControl(SourceGrid.GridVirtual)">
            <summary>
            Add the Control to the specified grid. Consider that a Control can only be a child of one Container.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalStartEdit(SourceGrid.CellContext)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
            <param name="cellContext">Cell to start edit</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can override this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.ApplyEdit">
            <summary>
            Apply edited value without stop the editing.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Cells.Editors.EditorControlBase.mIsInsideEndEdit">
            <summary>
            Variable that indicate if the InternalEndEdit method is already called. Is used because the InternalEndEdit can be called by a the Control_Validated or directly by the user.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalEndEdit(System.Boolean)">
            <summary>
            Terminate the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
            <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InnerControl_Validated(System.Object,System.EventArgs)">
            <summary>
            Validated of the editor control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.UndoEditValue">
            <summary>
            Undo the edit value of the control to the initial value of the cell, usually used when pressing Esc key or terminate the edit operation with Cancel true.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SafeSetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control calling the SetEditValue method. If an exception is throwed calls the OnUserException method and set the default value.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorControlBase.KeyPress">
            <summary>
            KeyPress event is fired in 2 cases: when the Control.KeyPress event is executed and when the user start to editing the cell by pressing a key (calling SendCharToEditor)
            Set the e.Handled property to true to block the event
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SendCharToEditor(System.Char)">
            <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnSendCharToEditor(System.Char)">
            <summary>
            Method used to precess the key sended.
            Abstract method that must be override in the derived class
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetMinimumSize(SourceGrid.CellContext)">
            <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type)">
            <summary>
            Construct an EditorBase for the specified type. You can set the value returned in the Editor property.
            If the Type support a UITypeEditor returns a EditorUITypeEditor else if the type has a StandardValues list return a EditorComboBox else if the type support string conversion returns a EditorTextBox otherwise returns null.
            </summary>
            <param name="p_Type">Type to edit</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type,System.Object,System.Boolean,System.Collections.ICollection,System.Boolean,System.ComponentModel.TypeConverter,System.Drawing.Design.UITypeEditor)">
            <summary>
            Construct a CellEditor for the specified type
            </summary>
            <param name="p_Type">Cell Type</param>
            <param name="p_DefaultValue">Default value of the editor</param>
            <param name="p_bAllowNull">Allow null</param>
            <param name="p_StandardValues">List of available values or null if there is no available values list</param>
            <param name="p_bStandardValueExclusive">Indicates if the p_StandardValue are the unique values supported</param>
            <param name="p_TypeConverter">Type converter used for conversion for the specified type</param>
            <param name="p_UITypeEditor">UITypeEditor if null must be populated the TypeConverter</param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.ImagePicker">
            <summary>
             A model that use a TextBoxButton for Image editing, allowing to select a source image file. Returns null as DisplayString. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.#ctor">
            <summary>
            Construct an Editor of type ImagePicker.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.ImagePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.ValueToDisplayString(System.Object)">
            <summary>
            Used to returns the display string for a given value. In this case return null.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.NumericUpDown">
            <summary>
            EditorNumericUpDown editor class.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.#ctor">
            <summary>
            Create a model of type Decimal
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.NumericUpDown.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.RichTextBox">
            <summary>
            An editor that use a RichTextBoxTyped for editing support.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.RichTextBox.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start.
            You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.RichTextBox.OnSendCharToEditor(System.Char)">
            <summary>
            Override content of cell with sent character
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBox">
            <summary>
            An editor that use a TextBoxTyped for editing support.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBox.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxButton">
            <summary>
            An editor that use a TextBoxTypedButton for editing.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxButton.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxCurrency">
            <summary>
            An editor to support Currency data type
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxCurrency.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxNumeric">
            <summary>
            An editor that use a TextBoxTypedNumeric for editing support. You can customize the Control.NumericCharStyle property to enable char validation.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxNumeric.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxUITypeEditor">
            <summary>
             An editor that use a UITypeEditor to edit the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxUITypeEditor.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TimePicker">
            <summary>
            Create an Editor that use a DateTimePicker as control for time editing.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TimePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Header.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="T:SourceGrid.Cells.ICell">
            <summary>
            Represents a Cell to use with Grid control.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.DisplayText">
            <summary>
            Gets the string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Value">
            <summary>
            Gets or sets the value of the cell 
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Tag">
            <summary>
            Gets or sets additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.ToolTipText">
            <summary>
            Gets or sets the ToolTipText
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Image">
            <summary>
            Gets or set the image of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICell.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Column">
            <summary>
            Gets the column of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Row">
            <summary>
            Gets the row of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Range">
            <summary>
            Gets the range of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.ColumnSpan">
            <summary>
            ColSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.RowSpan">
            <summary>
            RowSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICell.SetSpan(System.Int32,System.Int32)">
            <summary>
            Setting a col/row spann is a costly operation, so it's better
            if you set these two at the same time.
            Prefer this method to <c>RowSpan</c> and <c>ColSpan</c> property setters
            </summary>
            <param name="rowSpan"></param>
            <param name="colSpan"></param>
        </member>
        <member name="T:SourceGrid.Cells.ICellVirtual">
            <summary>
            Interface to represents a cell virtual (without position or value information).
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Editor">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Controller">
            <summary>
            Controller of the cell. Represents the actions of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Add the specified controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Remove the specifed controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.FindController(System.Type)">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <param name="pControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.FindController``1">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.View">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Model">
            <summary>
            Model that contains the data of the cells. Cannot be null.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.Copy">
            <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Image">
            <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Image.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Image.#ctor(System.Object)">
            <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Link.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Link.#ctor(System.Object)">
            <summary>
            Constructor using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="T:SourceGrid.Cells.Models.ICheckBox">
            <summary>
            Interface for informations about a cechkbox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ICheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
            <summary>
            Get the status of the checkbox at the current position
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.ICheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
            <summary>
            Set the checked value
            </summary>
            <param name="cellContext"></param>
            <param name="pChecked">True, False or Null</param>
        </member>
        <member name="T:SourceGrid.Cells.Models.CheckBoxStatus">
            <summary>
            Status of the CheckBox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,System.Nullable{System.Boolean},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="checkEnable"></param>
            <param name="bChecked"></param>
            <param name="caption"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,DevAge.Drawing.CheckBoxState,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="checkEnable"></param>
            <param name="checkState"></param>
            <param name="caption"></param>
        </member>
        <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.CheckState">
            <summary>
            Gets or sets the state of the check box.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.CheckEnable">
            <summary>
            Enable or disable the checkbox
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.Checked">
            <summary>
            Gets or set Checked status. Return true for Checked, false for Uncheck and null for Undefined
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.Caption">
            <summary>
            Caption of the CheckBox
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.IImage">
            <summary>
            Interface for informations about an image.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IImage.GetImage(SourceGrid.CellContext)">
            <summary>
            Get the image of the specified cell. 
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.IModel">
            <summary>
            A generic model interface
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.IRichTextBox">
            <summary>
            Model for RichTextBox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionFont(SourceGrid.CellContext,System.Drawing.Font)">
            <summary>
            Set font of selected text.
            </summary>
            <param name="cellContext"></param>
            <param name="font"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionFont(SourceGrid.CellContext)">
            <summary>
            Get font of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionColor(SourceGrid.CellContext,System.Drawing.Color)">
            <summary>
            Set color of selected text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionColor(SourceGrid.CellContext)">
            <summary>
            Get char offset of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionCharOffset(SourceGrid.CellContext,System.Int32)">
            <summary>
            Set char offset of selected text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionCharOffset(SourceGrid.CellContext)">
            <summary>
            Get char offset of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.SetSelectionAlignment(SourceGrid.CellContext,System.Windows.Forms.HorizontalAlignment)">
            <summary>
            Set horizontal alignment of selected text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IRichTextBox.GetSelectionAlignment(SourceGrid.CellContext)">
            <summary>
            Get horizontal alignment of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.ISortableHeader">
            <summary>
            Summary description for ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ISortableHeader.GetSortStatus(SourceGrid.CellContext)">
            <summary>
            Returns the current sort status
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.ISortableHeader.SetSortMode(SourceGrid.CellContext,DevAge.Drawing.HeaderSortStyle)">
            <summary>
            Set the current sort mode
            </summary>
            <param name="cellContext"></param>
            <param name="pStyle"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle)">
            <summary>
            Constructor
            </summary>
            <param name="p_Style">Status of current sort.</param>
        </member>
        <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle,System.Collections.IComparer)">
            <summary>
            Constructor
            </summary>
            <param name="p_Style">Status of current sort.</param>
            <param name="p_Comparer">Comparer used to sort the column. The comparer will take 2 Cell. If null the default ValueCellComparer is used.</param>
        </member>
        <member name="T:SourceGrid.Cells.Models.IToolTipText">
            <summary>
            Interface for informations about a tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IToolTipText.GetToolTipText(SourceGrid.CellContext)">
            <summary>
            Get the tooltiptext of the specified cell
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="T:SourceGrid.Cells.Models.IValueModel">
            <summary>
            A Model interface specific to contain the value of the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IValueModel.GetValue(SourceGrid.CellContext)">
            <summary>
            Get the value of the cell at the specified position
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.IValueModel.SetValue(SourceGrid.CellContext,System.Object)">
            <summary>
            Set the value of the cell at the specified position. This method must call OnValueChanging and OnValueChanged() event.
            </summary>
            <param name="cellContext"></param>
            <param name="p_Value"></param>
        </member>
        <member name="T:SourceGrid.Cells.Models.ModelContainer">
            <summary>
            A container for the model classes. THe only required model is the Value model, that you can assign using the ValueModel property.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ModelContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.ModelContainer.ModelList">
            <summary>
            A collection of elements of type IModel
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ModelContainer.FindModel(System.Type)">
            <summary>
            Returns null if not exist
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.NullValueModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.ValueModel">
            <summary>
            A model that contains the value of cell. Usually used for a Real Cell or cells with a static text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ValueModel.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="val">value to set for this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Models.ValueModel.SetValue(SourceGrid.CellContext,System.Object)">
            <summary>
            
            </summary>
            <param name="cellContext"></param>
            <param name="newValue">new value of this model</param>
        </member>
        <member name="T:SourceGrid.Cells.Models.CheckBox">
            <summary>
            CheckBox model.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
            <summary>
            Constructor
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
            <summary>
            Set the checked value
            </summary>
            <param name="cellContext"></param>
            <param name="pChecked"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.Image.GetImage(SourceGrid.CellContext)">
            <summary>
            Get the image of the specified cell. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.ValueImage">
            <summary>
            Model that implements the IImage interface, used to read the Image directly from the Value of the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.InsertString(SourceGrid.CellContext,System.String)">
            <summary>
            Insert a string at the selection
            </summary>
            <param name="cellContext"></param>
            <param name="s">String to insert</param>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionEffect(SourceGrid.CellContext,DevAge.Windows.Forms.EffectType)">
            <summary>
            Sets the effect of the selected text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionFont(SourceGrid.CellContext,System.Drawing.Font)">
            <summary>
            Change the font of the selected text.
            </summary>
            <param name="cellContext"></param>
            <param name="font"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionFont(SourceGrid.CellContext)">
            <summary>
            Get font of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionColor(SourceGrid.CellContext,System.Drawing.Color)">
            <summary>
            Change the font of the selected text.
            </summary>
            <param name="cellContext"></param>
            <param name="color"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionColor(SourceGrid.CellContext)">
            <summary>
            Get font of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionCharOffset(SourceGrid.CellContext)">
            <summary>
            Get char offset of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionCharOffset(SourceGrid.CellContext,System.Int32)">
            <summary>
            Change char offset of the selected text.
            </summary>
            <param name="cellContext"></param>
            <param name="charoffset"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.SetSelectionAlignment(SourceGrid.CellContext,System.Windows.Forms.HorizontalAlignment)">
            <summary>
            Set horizontal alignment of selected text.
            </summary>
            <param name="cellContext"></param>
            <param name="horAlignment"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.GetSelectionAlignment(SourceGrid.CellContext)">
            <summary>
            Get horizontal alignment of current selection
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.RichTextBox.GetRichTextBoxControl(SourceGrid.CellContext)">
            <summary>
            Get real RichTextBox Control
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.RichTextBox">
            <summary>
            A Cell with a RichTextBox. This Cell is of type string.
            View: Views.RichTextBox.Default 
            Model: Models.RichTextBox 
            Controllers: Controllers.RichTextBox.Default
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.#ctor">
            <summary>
            Default constrcutor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.#ctor(DevAge.Windows.Forms.RichText)">
            <summary>
            Value constrcutor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.RichTextBox.RichTextBoxModel">
            <summary>
            Get RichTextBoxModel
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.RichTextBox.SelectionFont">
            <summary>
            Font of current selection
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.RichTextBox.SelectionColor">
            <summary>
            Color of current selection
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.RichTextBox.SelectionCharOffset">
            <summary>
            CharOffset of current selection
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.RichTextBox.SelectionAlignment">
            <summary>
            Alignment of current selection
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionBold">
            <summary>
            Change SelectionFont to bold respectively not bold if already set.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionItalic">
            <summary>
            Change SelectionFont to italic respectively not italic if already set.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionUnderline">
            <summary>
            Change SelectionFont to underline respectively not underline if already set.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.InsertString(System.String)">
            <summary>
            Insert a string at the selection
            </summary>
            <param name="s">String to insert</param>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionSuperScript">
            <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionNormalScript">
            <summary>
            Change SelectionEffectType to normal.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionSubScript">
            <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RichTextBox.SelectionNormal">
            <summary>
            Change SelectionCharOffset to OFFSET respectively 0 if already set.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.RowHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RowHeader.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="P:SourceGrid.Cells.RowHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.Button">
            <summary>
            Summary description for a 3D themed Button.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Button.Default">
            <summary>
            Represents a Button with the ability to draw an Image. Disable also the selection border using the OwnerDrawSelectionBorder = true.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.#ctor(SourceGrid.Cells.Views.Button)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.Cell">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Cell.Default">
            <summary>
            Represents a default Model
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.#ctor(SourceGrid.Cells.Views.Cell)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.Cell.ElementText">
            <summary>
            Gets or sets the IText visual element used to draw the cell text.
            Default is DevAge.Drawing.VisualElements.TextGDI
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementText(SourceGrid.CellContext)">
            <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.Cell.ElementImage">
            <summary>
            Gets or sets the IImage visual element used to draw the cell image.
            Default is DevAge.Drawing.VisualElements.Image
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementImage(SourceGrid.CellContext)">
            <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.CheckBox">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.CheckBox.Default">
            <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.CheckBox.MiddleLeftAlign">
            <summary>
            Represents a CheckBox with the CheckBox image align to the Middle Left of the cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor(SourceGrid.Cells.Views.CheckBox)">
            <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="P:SourceGrid.Cells.Views.CheckBox.CheckBoxAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.CheckBox.ElementCheckBox">
            <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.ColumnHeader">
            <summary>
            Summary description for a 3D Header.
            This is a standard header without theme support. Use the ColumnHeaderThemed for theme support.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.ColumnHeader.Default">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor(SourceGrid.Cells.Views.ColumnHeader)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ColumnHeader.ElementSort">
            <summary>
            Gets or sets the visual element used to draw the sort indicator. Default is DevAge.Drawing.VisualElements.SortIndicator
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.ComboBox.Default">
            <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor(SourceGrid.Cells.Views.ComboBox)">
            <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="P:SourceGrid.Cells.Views.ComboBox.ElementDropDown">
            <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.Header">
            <summary>
            Summary description for a 3D Header.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Header.Default">
            <summary>
            Represents a default Header, with a 3D border and a LightGray BackColor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.#ctor(SourceGrid.Cells.Views.Header)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.IView">
            <summary>
            A interface that represents the visual aspect of a cell. Contains the Draw method and the common properties
            Support a deep cloning.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.GetDrawingFont(SourceGrid.GridVirtual)">
            <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.WordWrap">
            <summary>
            Word Wrap.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.TextAlignment">
            <summary>
            Text Alignment.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.Border">
            <summary>
            The normal border of a cell. Usually it is an instance of a DevAge.Drawing.RectangleBorder structure
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.BackColor">
            <summary>
            The BackColor of a cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.ForeColor">
            <summary>
            The ForeColor of a cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="cellContext"></param>
            <param name="graphics">Paint arguments</param>
            <param name="rectangle">Rectangle where draw the current cell</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.Measure(SourceGrid.CellContext,System.Drawing.Size)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="cellContext"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.Link">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Link.Default">
            <summary>
            Represents a model with a link style font and forecolor.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.#ctor(SourceGrid.Cells.Views.Link)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.MultiImages">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor(SourceGrid.Cells.Views.MultiImages)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SourceGrid.Cells.Views.MultiImages.SubImages">
            <summary>
            Images of the cells
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Cells.Views.RichTextBox.Default">
            <summary>
            Represents a rich text box
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RichTextBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RichTextBox.#ctor(SourceGrid.Cells.Views.RichTextBox)">
            <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="P:SourceGrid.Cells.Views.RichTextBox.ElementRichText">
            <summary>
            Gets or sets the IText visual element used to draw the cell rich text.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.RichTextBox.m_RotateFlipType">
            <summary>
            Rotate flip type
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RichTextBox.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.RowHeader">
            <summary>
            Summary description for a 3D themed Header.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.RowHeader.Default">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor(SourceGrid.Cells.Views.RowHeader)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Views.ViewBase">
            <summary>
            Base abstract class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.ViewBase.DefaultBorder">
            <summary>
            A default RectangleBorder instance with a 1 pixed LightGray border on bottom and right side
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor(SourceGrid.Cells.Views.ViewBase)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ImageStretch">
            <summary>
            True to stretch the image to all the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ImageAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Font">
            <summary>
            If null the grid font is used
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ForeColor">
            <summary>
            ForeColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.WordWrap">
            <summary>
            Word Wrap, default false.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.TrimmingMode">
            <summary>
            TrimmingMode, default Char.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.TextAlignment">
            <summary>
            Text Alignment.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.GetDrawingFont(SourceGrid.GridVirtual)">
            <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.BackColor">
            <summary>
            Returns the color of the Background. If the Background it isn't an instance of BackgroundSolid then returns DefaultBackColor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Border">
            <summary>
            The border of the Cell. Usually it is an instance of the DevAge.Drawing.RectangleBorder structure.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Padding">
            <summary>
            The padding of the cell. Usually it is 2 pixel on all sides.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ElementsDrawMode">
            <summary>
            Gets or sets a property that specify how to draw the elements.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="cellContext"></param>
            <param name="graphics">Paint arguments</param>
            <param name="rectangle">Rectangle where draw the current cell</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.PrepareView(SourceGrid.CellContext)">
            <summary>
            Prepare the current View before drawing. Override this method for customize the specials VisualModel that you need to create. Always calls the base PrepareView.
            </summary>
            <param name="context">Current context. Cell to draw. This property is set before drawing. Only inside the PrepareView you can access this property.</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.Measure(SourceGrid.CellContext,System.Drawing.Size)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="cellContext"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Background">
            <summary>
            Background of the cell. Usually it is an instance of BackgroundSolid
            </summary>
        </member>
        <member name="T:SourceGrid.DataGrid">
            <summary>
            A grid control that support load from a System.Data.DataView class, usually used for data binding.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGrid.CreateRowsObject">
            <summary>
            Method used to create the rows object, in this class of type DataGridRows.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGrid.CreateColumnsObject">
            <summary>
            Method used to create the columns object, in this class of type DataGridColumns.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.DataSource">
            <summary>
            Gets or sets the IBoundList used for data binding.
            It can be any class that implements the IBoundList interface, usually can be BoundList
             (that can be used to bind to a generic List) or BoundDataView (that can be used to bind to a DataView).
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.Rows">
            <summary>
            Gets the rows information as a DataGridRows object.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.Columns">
            <summary>
            Gets the columns informations as a DataGridColumns object.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGrid.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a specified Cell by its row and column.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGrid.CreateColumns">
            <summary>
            Automatic create the columns classes based on the specified DataSource.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.SelectedDataRows">
            <summary>
            Gets or sets the selected DataRowView.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.EndEditingRowOnValidate">
            <summary>
            Gets or sets a property to force an End Editing when the control loose the focus
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.DeleteRowsWithDeleteKey">
            <summary>
            Gets or sets if enable the delete of the selected rows when pressing Delete key.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.CancelEditingWithEscapeKey">
            <summary>
            Gets or sets if enable the Cancel Editing feature when pressing escape key
            </summary>
        </member>
        <member name="P:SourceGrid.DataGrid.DeleteQuestionMessage">
            <summary>
            Message showed with the DeleteSelectedRows method. Set to null to not show any message.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGrid.DeleteSelectedRows">
            <summary>
            Delete all the selected rows.
            </summary>
            <returns>Returns true if one or more row is deleted otherwise false.</returns>
        </member>
        <member name="M:SourceGrid.DataGrid.AutoSizeCells">
            <summary>
            AutoSize the columns based on the visible range and autosize the rows based on it's contents.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGrid.BeginEditRow(System.Int32)">
            <summary>
            Check if the specified row is the active row (focused), return false if it is not the active row. Then call the BeginEdit on the associated DataRowView. Add a row to the DataView if required. Returns true if the method sucesfully call the BeginEdit and set the EditingRow property.
            </summary>
            <param name="gridRow"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGrid.EndEditingRow(System.Boolean)">
            <summary>
            Calls the CancelEdit or the EndEdit on the editing Row and set to null the editing row.
            </summary>
            <param name="cancel"></param>
        </member>
        <member name="T:SourceGrid.DataGridValueModel">
            <summary>
            A Model of type IValueModel used for binding the value to a specified property of the bound object.
            Used for the DataGrid control.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridValueModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridColumns.IndexToPropertyColumn(System.Int32)">
            <summary>
            Return the DataColumn object for a given grid column index. Return null if not applicable, for example if the column index requested is a FixedColumns of an unbound column
            </summary>
            <param name="gridColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGridColumns.DataSourceColumnToIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the index for a given DataColumn. -1 if not valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.DataGridColumn">
            <summary>
            A ColumnInfo derived class used to store column informations for a DataGrid control.
            Mantains the cell used on this grid and manage the binding to the DataSource using a DataGridValueModel class.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridColumn.#ctor(SourceGrid.DataGrid)">
            <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.DataGridColumn.#ctor(SourceGrid.DataGrid,SourceGrid.Cells.ICellVirtual,SourceGrid.Cells.ICellVirtual,System.String)">
            <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridColumn.CreateRowHeader(SourceGrid.DataGrid)">
            <summary>
            Create a DataGridColumn with special cells used for RowHeader, usually used when FixedColumns is 1 for the first column.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGridColumn.Invalidate">
            <summary>
            Clears any associated data with DataGridView.
            <remarks>PropertyColumn binds to DataTable, calling invalidate will remove
            this link</remarks>
            </summary>
        </member>
        <member name="P:SourceGrid.DataGridColumn.PropertyColumn">
            <summary>
            Gets the property column. Can be null if not bound to a datasource Column.
            This field is used for example to support sorting.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGridColumn.HeaderCell">
            <summary>
            Gets or sets the header cell for this column.
            Typically is an instance of SourceGrid.Cells.DataGrid.ColumnHeader
            </summary>
        </member>
        <member name="P:SourceGrid.DataGridColumn.DataCell">
            <summary>
            Gets or sets the cell used for this column for all the rows to disply the data
            Typically is an instance of SourceGrid.Cells.DataGrid.Cell or other classes of the same namespace
            </summary>
        </member>
        <member name="P:SourceGrid.DataGridColumn.Conditions">
            <summary>
            Gets the conditions used to returns different cell based on the data of the row.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridColumn.GetDataCell(System.Int32)">
            <summary>
            Gets the ICellVirtual for the current column and the specified row.
            Override this method to provide custom cells, based on the row informations.
            </summary>
            <param name="gridRow"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.DataGridRows">
            <summary>
            This class implements a RowsSimpleBase class using a DataView bound mode for row count.
            </summary>
        </member>
        <member name="P:SourceGrid.DataGridRows.Count">
            <summary>
            Gets the number of row of the current DataView. Usually this value is automatically calculated and cannot be changed manually.
            </summary>
        </member>
        <member name="M:SourceGrid.DataGridRows.IndexToDataSourceIndex(System.Int32)">
            <summary>
            Returns the DataSource index for the specified grid row index.
            </summary>
            <param name="gridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGridRows.DataSourceIndexToGridRowIndex(System.Int32)">
            <summary>
            Returns the grid index for the specified DataSource index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGridRows.IndexToDataSourceRow(System.Int32)">
            <summary>
            Returns the DataRowView object for a given grid row index. Return null if not applicable, for example if the DataSource is null or if the row index requested is a FixedRows
            </summary>
            <param name="gridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.DataGridRows.DataSourceRowToIndex(System.Object)">
            <summary>
            Returns the index for a given item row. -1 if not valid.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.DataGridRows.HeaderHeight">
            <summary>
            Gets or sets the header height (row 0)
            </summary>
        </member>
        <member name="T:SourceGrid.ListEditor">
            <summary>
            Summary description for ListEditor.
            </summary>
        </member>
        <member name="F:SourceGrid.ListEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SourceGrid.ListEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SourceGrid.ListEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.Cells.Header">
            <summary>
            A cell used for the top/left cell when using DataGridRowHeader.
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.Cells.ColumnHeader">
            <summary>
            A cell header used for the columns. Usually used in the HeaderCell property of a DataGridColumn.
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.Cells.RowHeader">
            <summary>
            A cell used as left row selector. Usually used in the DataCell property of a DataGridColumn. If FixedColumns is grater than 0 and the columns are automatically created then the first column is created of this type.
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.IPropertyResolver">
            <summary>
            An extension point, where users could define their own 
            property resolver
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.CreateRowsObject">
            <summary>
            Method used to create the rows object, in this class of type PingGridRows.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.CreateColumnsObject">
            <summary>
            Method used to create the columns object, in this class of type DataGridColumns.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.EnableSort">
            <summary>
            Sorting is always enabled
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DataSource">
            <summary>
            Gets or sets the IBoundList used for data binding.
            It can be any class that implements the IBoundList interface, usually can be BoundList
             (that can be used to bind to a generic List) or BoundDataView (that can be used to bind to a DataView).
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.Rows">
            <summary>
            Gets the rows information as a PingGridRows object.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.Columns">
            <summary>
            Gets the columns informations as a PingGridColumns object.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a specified Cell by its row and column.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.SelectedDataRows">
            <summary>
            Gets or sets the selected DataRowView.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.EndEditingRowOnValidate">
            <summary>
            Gets or sets a property to force an End Editing when the control loose the focus
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DeleteRowsWithDeleteKey">
            <summary>
            Gets or sets if enable the delete of the selected rows when pressing Delete key.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.CancelEditingWithEscapeKey">
            <summary>
            Gets or sets if enable the Cancel Editing feature when pressing escape key
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGrid.DeleteQuestionMessage">
            <summary>
            Message showed with the DeleteSelectedRows method. Set to null to not show any message.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.DeleteSelectedRows">
            <summary>
            Delete all the selected rows.
            </summary>
            <returns>Returns true if one or more row is deleted otherwise false.</returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.AutoSizeCells">
            <summary>
            AutoSize the columns based on the visible range and autosize the rows based on it's contents.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.BeginEditRow(System.Int32)">
            <summary>
            Check if the specified row is the active row (focused), return false if it is not the active row. Then call the BeginEdit on the associated DataRowView. Add a row to the DataView if required. Returns true if the method sucesfully call the BeginEdit and set the EditingRow property.
            </summary>
            <param name="gridRow"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGrid.EndEditingRow(System.Boolean)">
            <summary>
            Calls the CancelEdit or the EndEdit on the editing Row and set to null the editing row.
            </summary>
            <param name="cancel"></param>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.PingGridCellController">
            <summary>
            Notify PingGrid of value editing
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.PingGridColumn">
            <summary>
            A ColumnInfo derived class used to store column informations for a PingGrid control.
            Mantains the cell used on this grid and manage the binding to the DataSource using a DataGridValueModel class.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.#ctor(SourceGrid.Extensions.PingGrids.PingGrid)">
            <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.#ctor(SourceGrid.Extensions.PingGrids.PingGrid,SourceGrid.Cells.ICellVirtual,SourceGrid.Cells.ICellVirtual,System.String)">
            <summary>
            Constructor. Create a DataGridColumn class.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.CreateRowHeader(SourceGrid.Extensions.PingGrids.PingGrid)">
            <summary>
            Create a DataGridColumn with special cells used for RowHeader, usually used when FixedColumns is 1 for the first column.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.Invalidate">
            <summary>
            Clears any associated data with DataGridView.
            <remarks>PropertyColumn binds to DataTable, calling invalidate will remove
            this link</remarks>
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.PropertyColumn">
            <summary>
            Gets the property column. Can be null if not bound to a datasource Column.
            This field is used for example to support sorting.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.HeaderCell">
            <summary>
            Gets or sets the header cell for this column.
            Typically is an instance of SourceGrid.Cells.DataGrid.ColumnHeader
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.DataCell">
            <summary>
            Gets or sets the cell used for this column for all the rows to disply the data
            Typically is an instance of SourceGrid.Cells.DataGrid.Cell or other classes of the same namespace
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridColumn.Conditions">
            <summary>
            Gets the conditions used to returns different cell based on the data of the row.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumn.GetDataCell(System.Int32)">
            <summary>
            Gets the ICellVirtual for the current column and the specified row.
            Override this method to provide custom cells, based on the row informations.
            </summary>
            <param name="gridRow"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumns.IndexToPropertyColumn(System.Int32)">
            <summary>
            Return the DataColumn object for a given grid column index. Return null if not applicable, for example if the column index requested is a FixedColumns of an unbound column
            </summary>
            <param name="gridColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridColumns.DataSourceColumnToIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the index for a given DataColumn. -1 if not valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.PingGridRows">
            <summary>
            This class implements a RowsSimpleBase class using a DataView bound mode for row count.
            </summary>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridRows.Count">
            <summary>
            Gets the number of row of the current DataView. Usually this value is automatically calculated and cannot be changed manually.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.IndexToDataSourceIndex(System.Int32)">
            <summary>
            Returns the DataSource index for the specified grid row index.
            </summary>
            <param name="gridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.DataSourceIndexToGridRowIndex(System.Int32)">
            <summary>
            Returns the grid index for the specified DataSource index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.IndexToDataSourceRow(System.Int32)">
            <summary>
            Returns the DataRowView object for a given grid row index. Return null if not applicable, for example if the DataSource is null or if the row index requested is a FixedRows
            </summary>
            <param name="gridRowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridRows.DataSourceRowToIndex(System.Object)">
            <summary>
            Returns the index for a given item row. -1 if not valid.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Extensions.PingGrids.PingGridRows.HeaderHeight">
            <summary>
            Gets or sets the header height (row 0)
            </summary>
        </member>
        <member name="T:SourceGrid.Extensions.PingGrids.PingGridValueModel">
            <summary>
            A Model of type IValueModel used for binding the value to a specified property of the bound object.
            Used for the DataGrid control.
            </summary>
        </member>
        <member name="M:SourceGrid.Extensions.PingGrids.PingGridValueModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Planning.PlanningGrid">
            <summary>
            Summary description for PlanningGrid.
            </summary>
        </member>
        <member name="F:SourceGrid.Planning.PlanningGrid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SourceGrid.Planning.PlanningGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SourceGrid.Planning.PlanningGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SourceGrid.Planning.PlanningGrid.Grid">
            <summary>
            The grid used internally to display the planning (note that you usually don't need to access directly this class).
            </summary>
        </member>
        <member name="M:SourceGrid.Planning.PlanningGrid.LoadPlanning(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Load the grid using the parameters specified
            </summary>
            <param name="dateTimeStart"></param>
            <param name="dateTimeEnd"></param>
            <param name="minAppointmentLength"></param>
        </member>
        <member name="T:SourceGrid.Planning.AppointmentCollection">
            <summary>
            A collection of elements of type IAppointment
            </summary>
        </member>
        <member name="T:SourceGrid.CellCollection">
            <summary>
            A collection of elements of type Cells.ICellVirtual
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor">
            <summary>
            Initializes a new empty instance of the CellBaseCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.Cells.ICellVirtual[])">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.CellCollection)">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from another instance of CellBaseCollection
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.Cells.ICellVirtual[])">
            <summary>
            Adds the elements of an array to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.CellCollection)">
            <summary>
            Adds the elements of another CellBaseCollection to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.Add(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Adds an instance of type Cells.ICellVirtual to the end of this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.Contains(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Determines whether a specfic Cells.ICellVirtual value is in this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to locate in this CellBaseCollection.
            </param>
            <returns>
            true if value is found in this CellBaseCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid.CellCollection.IndexOf(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CellBaseCollection
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to locate in the CellBaseCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid.CellCollection.Insert(System.Int32,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Inserts an element into the CellBaseCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Cells.ICellVirtual is to be inserted.
            </param>
            <param name="value">
            The Cells.ICellVirtual to insert.
            </param>
        </member>
        <member name="P:SourceGrid.CellCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Cells.ICellVirtual at the given index in this CellBaseCollection.
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.Remove(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Removes the first occurrence of a specific Cells.ICellVirtual from this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to remove from this CellBaseCollection.
            </param>
        </member>
        <member name="T:SourceGrid.CellCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by CellBaseCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.#ctor(SourceGrid.CellCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:SourceGrid.CellCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid.CellCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this CellBaseCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:SourceGrid.CellContext">
            <summary>
            Structure that represents a logical cell, composed by a ICellVirtual, a Position and a GridVirtual.
            This is an important structure used to manipulate the cell object, both virtual and real.
            </summary>
        </member>
        <member name="F:SourceGrid.CellContext.Empty">
            <summary>
            An empty CellContext instance.
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="pGridVirtual"></param>
            <param name="pPosition"></param>
            <param name="pCell"></param>
        </member>
        <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pGridVirtual"></param>
            <param name="pPosition"></param>
        </member>
        <member name="M:SourceGrid.CellContext.Measure(System.Drawing.Size)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalGetRequiredSize with RowSpan and ColSpan = 1.
            </summary>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.StartEdit">
            <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.EndEdit(System.Boolean)">
            <summary>
            Terminate the edit operation.
            </summary>
            <param name="cancel">If true undo all the changes</param>
            <returns>Returns true if the edit operation is successfully terminated, otherwise false</returns>
        </member>
        <member name="M:SourceGrid.CellContext.IsEditing">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.CanBeDrawn">
            <summary>
            True is the cell can be drawn (usually if the cell is in editing state the drawing code is disabled)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Invalidate">
            <summary>
            Invalidate this cell
            </summary>
        </member>
        <member name="P:SourceGrid.CellContext.DisplayText">
            <summary>
            Gets the string representation of the Model.ValueModel.GetValue method (default ToString())
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.CellContext.Value">
            <summary>
            Gets or sets the cell value.
            </summary>
        </member>
        <member name="P:SourceGrid.CellContext.CellRange">
            <summary>
            Calculate the Range occupied by the current cell. Usually it is simply the Position property, only if RowSpan or ColumnSpan is used this property returns a larger range.
            Internally use the Grid.PositionToCellRange method.
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.IsEmpty">
            <summary>
            Returns true if the current struct is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Equals(SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.op_Equality(SourceGrid.CellContext,SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.op_Inequality(SourceGrid.CellContext,SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.ColumnInfo">
            <summary>
            Column Information
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfo.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="P:SourceGrid.ColumnInfo.MaximalWidth">
            <summary>
            Maximal width of the current Column, -1 if unlimited
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.MinimalWidth">
            <summary>
            Minimal width of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Width">
            <summary>
            Width of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Index">
            <summary>
            Index of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Visible">
            <summary>
            Gets or sets if the column is visible.
            Internally set the width to 0 to hide a column.
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnInfoCollection">
            <summary>
            Collection of ColumnInfo
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.InsertRange(System.Int32,SourceGrid.ColumnInfo[])">
            <summary>
            Insert the specified number of Columns at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="columns"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a column at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the ColumnInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a column from one position to another position
            </summary>
            <param name="p_CurrentColumnPosition"></param>
            <param name="p_NewColumnPosition"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of column 1 with column 2.
            </summary>
            <param name="p_ColumnIndex1"></param>
            <param name="p_ColumnIndex2"></param>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsAdded">
            <summary>
            Fired when the number of columns change
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsAdded(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when the number of columns change
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoved">
            <summary>
            Fired when some columns are removed
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoved(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoving">
            <summary>
            Fired before some columns are removed
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoving(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired before some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.ColumnInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a ColumnInfo at the specified position
            </summary>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnWidthChanged">
            <summary>
            Fired when the user change the Width property of one of the Column
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnWidthChanged(SourceGrid.ColumnInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.AutoSizeView">
            <summary>
            Auto size the columns calculating the required size only on the rows currently visible
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Clear">
            <summary>
            Remove all the columns
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnsBase">
            <summary>
            Abstract base class for manage columns informations.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetWidth(System.Int32)">
            <summary>
            Gets the width of the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.SetWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width of the specified column.
            </summary>
            <param name="column"></param>
            <param name="width"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.AutoSizeColumn(System.Int32)">
            <summary>
            Autosize column using default auto size mode
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.AutoSizeColumn(System.Int32,System.Boolean)">
            <summary>
            Autosize column using default auto size mode
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.MeasureColumnWidth(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
            <param name="column"></param>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
            <returns>Returns the required width</returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the columns with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.StretchToFit">
            <summary>
            stretch the columns width to always fit the available space when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32)">
            <summary>
            Gets the columns index inside the specified display area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the columns index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
            <param name="returnsPartial">True to returns also partial columns</param>
            <param name="x"></param>
            <param name="width"></param>
            <param name="returnsFixedColumns"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnAtPoint(System.Int32)">
            <summary>
            Calculate the Column that have the Left value smaller or equal than the point p_X, or -1 if not found found.
            </summary>
            <param name="x">X Coordinate to search for a column</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.ColumnsBase.FirstVisibleScrollableColumn">
            <summary>
            Returns the first visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.ColumnsBase.LastVisibleScrollableColumn">
            <summary>
            Returns the last visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsChanged">
            <summary>
            Fired when the numbes of columns changed.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetLeft(System.Int32)">
            <summary>
            Gets the column left position.
            The Left is relative to the specified start position.
            Calculate the left using also the FixedColumn if present.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetRight(System.Int32)">
            <summary>
            Gets the column right position. GetLeft + GetWidth.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ShowColumn(System.Int32)">
            <summary>
            Show a column (set the width to default width)
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.HideColumn(System.Int32)">
            <summary>
            Hide the specified column (set the width to 0)
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.IsColumnVisible(System.Int32)">
            <summary>
            Returns true if the specified column is visible
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.ColumnsSimpleBase">
            <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
        </member>
        <member name="T:SourceGrid.CustomScrollControl">
            <summary>
            A control with a custom implementation of a scrollable area
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.AutoScroll">
            <summary>
            I disabled the default AutoScroll property because I have a custom implementation
            </summary>
        </member>
        <member name="F:SourceGrid.CustomScrollControl.mBottomRightPanel">
            <summary>
            Panel showed on the bottom right of the grid when both scrollbars are visible
            </summary>
        </member>
        <member name="F:SourceGrid.CustomScrollControl.panelDockBottom">
            <summary>
            Internal panel that contains hScrollBar and mBottomRightPanel
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.VScrollBar">
            <summary>
            Gets the vertical scrollbar. Can be visible or unvisible.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.HScrollBar">
            <summary>
            Gets the horizontal scrollbar. Can be visible or unvisible.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.BottomRightPanel">
            <summary>
            Gets the panel at the bottom right of the control. This panel is valid only if HScrollBar and VScrollBar are valid. Otherwise is null.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.InvalidateScrollableArea">
            <summary>
            Invalidate the scrollable area
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.PrepareScrollBars(System.Boolean,System.Boolean)">
            <summary>
            Prepare the scrollbars with the specified dock option.
            </summary>
            <param name="showHScroll"></param>
            <param name="showVScroll"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.LoadScrollArea(System.Int32,System.Int32)">
            <summary>
            Load the scrollable area that will affect the maximum scroll values.
            </summary>
            <param name="verticalPage"></param>
            <param name="horizontalPage"></param>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.CustomScrollPosition">
            <summary>
            Gets or sets the current scroll position relative to the CustomScrollArea.
            The value must be always between 0 and CustomScrollArea (0 or positive).
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.DisplayRectangle">
            <summary>
            Display rectangle of the control, without ScrollBars.
            Note: I don't override this method because I use some dock feature that require the real display rectangle.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcHScrollBar(System.Int32)">
            <summary>
            recalculate the position of the horizontal scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcVScrollBar(System.Int32)">
            <summary>
            Recalculate the position of the vertical scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcCustomScrollBars">
            <summary>
            Recalculate the scrollbars position and size.
            Use this to refresh scroll bars
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.GetScrollRows(System.Int32)">
            <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.GetScrollColumns(System.Int32)">
            <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MaximumVScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MinimumVScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MinimumHScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MaximumHScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            OnLayout Method
            </summary>
            <param name="levent"></param>
        </member>
        <member name="E:SourceGrid.CustomScrollControl.VScrollPositionChanged">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.CustomScrollControl.HScrollPositionChanged">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageDown">
            <summary>
            Scroll the page down
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageToLine(System.Int32)">
            <summary>
            Scroll the page down to line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.IsMaxPage">
            <summary>
            Scroll the page down to line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageUp">
            <summary>
            Scroll the page up
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageRight">
            <summary>
            Scroll the page right
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageLeft">
            <summary>
            Scroll the page left
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineDown">
            <summary>
            Scroll the page down one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineUp">
            <summary>
            Scroll the page up one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineRight">
            <summary>
            Scroll the page right one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineLeft">
            <summary>
            Scroll the page left one line
            </summary>
        </member>
        <member name="T:SourceGrid.GridSelectionMode">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="T:SourceGrid.ContextMenuStyle">
            <summary>
            ContextMenuStyle (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.EditableMode">
            <summary>
            EditableMode Cell mode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.None">
            <summary>
            No edit support
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.F2Key">
            <summary>
            Edit the cell with F2 key ( 1 )
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.DoubleClick">
            <summary>
            Edit the cell with a double click (2)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.SingleClick">
            <summary>
            Edit a cell with a single Key (4)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.AnyKey">
            <summary>
            Edit the cell pressing any keys (8 + F2Key)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.Focus">
            <summary>
            Edit the cell when it receive the focus (16)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.Default">
            <summary>
            DoubleClick + F2Key
            </summary>
        </member>
        <member name="T:SourceGrid.CellResizeMode">
            <summary>
            Type of resize of the cells (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.GridSpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.None">
            <summary>
            No keys
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Arrows">
            <summary>
            Arrows keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Tab">
            <summary>
            Tab and Shift+Tab keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.PageDownUp">
            <summary>
            PageDown and PageUp keys, for page operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Enter">
            <summary>
            Enter key, for apply editing operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Escape">
            <summary>
            Escape key, for cancel editing operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Control">
            <summary>
            Control key, for selection operations. Enables the selection of non adjacent cells
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Shift">
            <summary>
            Shift key, for selection operations. Enables the selection of the range from the focused cell to the selected cells.
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Default">
            <summary>
            Default: Arrows|Tab|PageDownUp|Enter|Escape|Control|Shift
            </summary>
        </member>
        <member name="T:SourceGrid.CellPositionType">
            <summary>
            Position type of the cell. Look at the .vsd diagram for details.
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.Empty">
            <summary>
            Empty Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedTopLeft">
            <summary>
            Fixed Top+Left Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedTop">
            <summary>
            Fixed Top Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedLeft">
            <summary>
            Fixed Left cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.Scrollable">
            <summary>
            Scrollable Cell
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionChangeEventType">
            <summary>
            SelectionChangeEventType
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:SourceGrid.FocusStyle">
            <summary>
            FocusStyle (Flags). Used to customize the style of the focus.
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.RemoveFocusCellOnLeave">
            <summary>
            Remove the focus cell when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.RemoveSelectionOnLeave">
            <summary>
            Remove the selection when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.FocusFirstCellOnEnter">
            <summary>
            Set the focus on the first cell when the grid receive the focus and there isnt' an active cell. Use the FocusFirstCell method.
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.Default">
            <summary>
            The default value for this flags: FocusStyle.FocusFirstCellOnEnter | FocusStyle.RemoveFocusCellOnLeave
            </summary>
        </member>
        <member name="T:SourceGrid.AutoSizeMode">
            <summary>
            AutoSizeMode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.EnableAutoSize">
            <summary>
            Enable the AutoSize
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.EnableAutoSizeView">
            <summary>
            Enable the AutoSize only for visible view
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.EnableStretch">
            <summary>
            Enable Stretch operation
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.MinimumSize">
            <summary>
            If this flag is selected the Measure function returns always the minimum column/row size and don't calculate the real required size. This flag can be used to don't consider the content of a column/row
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.Default">
            <summary>
            Default: EnableAutoSize, EnableStretch
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionBorderMode">
            <summary>
            SelectionBorderMode. Used with Grid.Selection.BorderMode property
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.None">
            <summary>
            Don't draw a border around each selection range
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.FocusRange">
            <summary>
            Draw a border around the range that contains the focus.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.FocusCell">
            <summary>
            Draw a border around the focusl cell
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.UniqueRange">
            <summary>
            Draw a border around the selection range only is there is only one range selected
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.Auto">
            <summary>
            Like the UniqueRange enum but when there is more then one range set the range only on the FocusCell
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionMaskStyle">
            <summary>
            SelectionmaskStyle, used to customize the visual style of the selection mask. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.None">
            <summary>
            None. No special flags
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.DrawOnlyInitializedCells">
            <summary>
            Used to draw only initialized cells. If you have uninitialized cell (you don't create a cell for a specific position: grid[0,0] = null;) the selection mask is not drawed on this cell. Consider that with this flags the drawing method is more complex and slow.If you use this flag the border can only be set to FocusCell or None.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.DrawSeletionOverCells">
            <summary>
            Used to draw the selection over the the cells, usually used with a transparent backcolor drawed over the normal cell. If not set, each cells (View) draw the selection or focus backcolor inside the normal drawing code.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.Default">
            <summary>
            Default value: None
            </summary>
        </member>
        <member name="T:SourceGrid.CutMode">
            <summary>
            Enum used to specify the cut operation style. Used with the RangeData class.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.None">
            <summary>
            Cut disabled.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.CutOnPaste">
            <summary>
            Cut enabled, the data are removed from the source only when pasting it on the destination. Used usually with the drag and drop operations.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.CutImmediately">
            <summary>
            Cut enabled, the data are removed immediately when cutting the data source.
            </summary>
        </member>
        <member name="T:SourceGrid.TrimmingMode">
            <summary>
            String trimming mode
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Copy">
            <summary>
            Copy using Ctrl+C
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Cut">
            <summary>
            Cut using Ctrl+X
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Paste">
            <summary>
            Paste using Ctrl+V
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Delete">
            <summary>
            Delete using Del key
            </summary>
        </member>
        <member name="T:SourceGrid.CellOptimizeMode">
            <summary>
            Optimize mode used when constructing the grid control.
            </summary>
        </member>
        <member name="F:SourceGrid.CellOptimizeMode.ForRows">
            <summary>
            Optimize the grid for many rows
            </summary>
        </member>
        <member name="F:SourceGrid.CellOptimizeMode.ForColumns">
            <summary>
            Optimize the grid for many columns
            </summary>
        </member>
        <member name="T:SourceGrid.RowEventArgs">
            <summary>
            EventArgs used by the FocusRowEnter
            </summary>
        </member>
        <member name="P:SourceGrid.RowEventArgs.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="M:SourceGrid.RowEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pRow"></param>
        </member>
        <member name="T:SourceGrid.RowEventHandler">
            <summary>
            EventHandler used by the FocusRowEnter
            </summary>
        </member>
        <member name="T:SourceGrid.RowCancelEventArgs">
            <summary>
            EventArgs used by the FocusRowLeaving
            </summary>
        </member>
        <member name="P:SourceGrid.RowCancelEventArgs.Cancel">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:SourceGrid.RowCancelEventArgs.ProposedRow">
            <summary>
            Proposed row
            </summary>
        </member>
        <member name="M:SourceGrid.RowCancelEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.RowCancelEventHandler">
            <summary>
            EventHandler used by the FocusRowLeaving
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnEventArgs">
            <summary>
            EventArgs used by the FocusColumnEnter
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnEventArgs.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="T:SourceGrid.ColumnEventHandler">
            <summary>
            EventHandled used by the FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnCancelEventArgs">
            <summary>
            EventArgs used by the FocusColumnLeaving
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnCancelEventArgs.Cancel">
            <summary>
            Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnCancelEventArgs.ProposedColumn">
            <summary>
            Proposed column
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnCancelEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnCancelEventHandler">
            <summary>
            EventHandled used by the FocusColumnLeave and FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid.ChangeActivePositionEventArgs">
            <summary>
            Cell Lost Focus event arguments with the old position and the new position. Extends PositionCancelEventArgs.
            </summary>
        </member>
        <member name="M:SourceGrid.ChangeActivePositionEventArgs.#ctor(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pOldFocusPosition"></param>
            <param name="pNewFocusPosition">If Empty there isn't a cell that will receive the focus.</param>
        </member>
        <member name="P:SourceGrid.ChangeActivePositionEventArgs.OldFocusPosition">
            <summary>
            Position that had the focus
            </summary>
        </member>
        <member name="P:SourceGrid.ChangeActivePositionEventArgs.NewFocusPosition">
            <summary>
            Position that will receive the focus. If Empty there isn't a cell that will receive the focus.
            </summary>
        </member>
        <member name="T:SourceGrid.RangeRegionChangedEventArgs">
            <summary>
            Represents the event arguments used when changing a RangeRegion class (like the selection class).
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Constructor
            </summary>
            <param name="addedRange"></param>
            <param name="removedRange"></param>
        </member>
        <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.RangeRegion,SourceGrid.RangeRegion)">
            <summary>
            Constructor
            </summary>
            <param name="addedRange">Use null if the added range is empty</param>
            <param name="removedRange">Use null if the removed range is empty</param>
        </member>
        <member name="P:SourceGrid.RangeRegionChangedEventArgs.AddedRange">
            <summary>
            Null if the added range is empty
            </summary>
        </member>
        <member name="P:SourceGrid.RangeRegionChangedEventArgs.RemovedRange">
            <summary>
            Null if the removed range is empty
            </summary>
        </member>
        <member name="M:SourceGrid.IHiddenRowCoordinator.LoopVisibleRows(System.Int32,System.Int32)">
            <summary>
            Returns a sequence of row indexes which are visible only.
            Correctly handles invisible rows.
            </summary>
            <param name="rowIndex"></param>
            <param name="numberOfRowsToProduce">How many visible rows to return</param>
            <returns>Can return less rows than requested. This might occur
            if you request to return visible rows in the end of the grid,
            and all the rows would be hidden. In that case no indexes would be returned
            at all, even though specific amount of rows was requested</returns>
        </member>
        <member name="M:SourceGrid.IHiddenRowCoordinator.ConvertScrollbarValueToRowIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="scrollBarValue">The value of the vertical scroll bar. Note that
            this does not directly relate to row number. If there are no hidden rows at all,
            then scroll bar value directly relates to row index number. However,
            if some rows are hidden, then this value is different.
            Basically, it says how many visible rows must be scrolled down</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.IRows.ShowRow(System.Int32,System.Boolean)">
            <summary>
            Use this method to show or hide row
            </summary>
            <param name="row"></param>
            <param name="isVisible"></param>
        </member>
        <member name="T:SourceGrid.LinkedControlsList">
            <summary>
            A dictionary with keys of type Control and values of type LinkedControlValue
            </summary>
        </member>
        <member name="T:SourceGrid.LinkedControlScrollMode">
            <summary>
            Determine the scrolling mode of the linked controls.
            </summary>
        </member>
        <member name="T:SourceGrid.LinkedControlValue">
            <summary>
            Linked control value
            </summary>
        </member>
        <member name="M:SourceGrid.LinkedControlValue.#ctor(System.Windows.Forms.Control,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.Position">
            <summary>
            Gets or sets the position of the linked control.
            </summary>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.UseCellBorder">
            <summary>
            Gets or sets if show the cell border. True to insert the editor control inside the border of the cell, false to put the editor control over the entire cell. If you use true remember to set EnableCellDrawOnEdit == true.
            </summary>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.ScrollMode">
            <summary>
            Gets or sets the scrolling mode of the control.
            </summary>
        </member>
        <member name="M:SourceGrid.LinkedControlValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Position">
            <summary>
            Represents a cell position (Row, Col). Once created connot be modified
            </summary>
        </member>
        <member name="M:SourceGrid.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="P:SourceGrid.Position.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:SourceGrid.Position.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="F:SourceGrid.Position.Empty">
            <summary>
            Empty position
            </summary>
        </member>
        <member name="M:SourceGrid.Position.IsEmpty">
            <summary>
            Returns true if the current struct is empty
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Position.c_EmptyIndex">
            <summary>
            An empty index constant
            </summary>
        </member>
        <member name="M:SourceGrid.Position.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Equals(SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.op_Equality(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.op_Inequality(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Min(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Returns a position with the smaller Row and the smaller column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Max(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Returns a position with the bigger Row and the bigger column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.PositionCollection">
            <summary>
            A collection of elements of type Position
            </summary>
        </member>
        <member name="T:SourceGrid.Range">
            <summary>
            Represents a range of cells. Once created cannot be modified. This Range has always Start in the Top-Left, and End in the Bottom-Right (see Normalize method).
            </summary>
        </member>
        <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="p_Start"></param>
            <param name="p_End"></param>
        </member>
        <member name="M:SourceGrid.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="p_StartRow"></param>
            <param name="p_StartCol"></param>
            <param name="p_EndRow"></param>
            <param name="p_EndCol"></param>
        </member>
        <member name="M:SourceGrid.Range.MoveTo(SourceGrid.Position)">
            <summary>
            Move the current range to the specified position, leaving the current ColumnsCount and RowsCount
            </summary>
            <param name="p_StartPosition"></param>
        </member>
        <member name="P:SourceGrid.Range.ColumnsCount">
            <summary>
            Sets or Gets the columns count (End.Column-Start.Column)
            </summary>
        </member>
        <member name="P:SourceGrid.Range.RowsCount">
            <summary>
            Sets or Gets the rows count (End.Row-Start.Row)
            </summary>
        </member>
        <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position)">
            <summary>
            Construct a Range of a single cell
            </summary>
            <param name="p_SinglePosition"></param>
        </member>
        <member name="F:SourceGrid.Range.Empty">
            <summary>
            Represents an empty range
            </summary>
        </member>
        <member name="M:SourceGrid.Range.Normalize">
            <summary>
            Check and fix the range to always have Start smaller than End
            </summary>
        </member>
        <member name="M:SourceGrid.Range.ContainsRow(System.Int32)">
            <summary>
            Returns true if the specified row is present in the current range.
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.ContainsColumn(System.Int32)">
            <summary>
            Returns true if the specified column is present in the current range.
            </summary>
            <param name="p_Col"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Contains(SourceGrid.Position)">
            <summary>
            Returns true if the specified cell position is present in the current range.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Contains(SourceGrid.Range)">
            <summary>
            Returns true if the specified range is present in the current range.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IsEmpty">
            <summary>
            Determines if the current range is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.op_Equality(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.op_Inequality(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Equals(SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetCellsPositions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Union(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetBounds(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Exclude(SourceGrid.Range)">
            <summary>
            Return all the cells that don't intersect with the specified cells. (Remove the specified cells from the current cells ad returns the remaining cells)
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.IRangeLoader">
            <summary>
            Interface that rappresent a range of the grid. (RangeFullGridNoFixedRows, RangeFullGridNoFixedCols, RangeFixedRows, RangeFixedCols, Range)
            This class is used to calculate a real Range structure at runtime.
            </summary>
        </member>
        <member name="M:SourceGrid.IRangeLoader.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Rectangle that contains the range.
            </summary>
        </member>
        <member name="T:SourceGrid.RangeFullGrid">
            <summary>
            Represents a range that contains all the grid
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGrid.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFullGridNoFixedRows">
            <summary>
            Represents a range that contains all the grid with no fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedRows.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFullGridNoFixedCols">
            <summary>
            Represents a range that contains all the grid with no fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedCols.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFixedRows">
            <summary>
            Represents a range that contains only fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedRows.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFixedCols">
            <summary>
            Represents a range that contains only fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedCols.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeLoader">
            <summary>
            Range custom
            </summary>
        </member>
        <member name="M:SourceGrid.RangeLoader.#ctor(SourceGrid.Range)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.RangeLoader.Range">
            <summary>
            Gets or sets the Range loaded in the class.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeLoader.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeCollection">
            <summary>
            A collection of elements of type Range
            </summary>
        </member>
        <member name="M:SourceGrid.RangeCollection.ContainsCell(SourceGrid.Position)">
            <summary>
            Returns true if the specified cell position is present in any range in the current collection.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeData">
            <summary>
            RangeData class represents a range of data. Can represent a range of data in string format. Usually used for drag and drop and clipboard copy/paste operations.
            See Controllers\Clipboard, Controllers\SelectionDrag and Controllers\SelectionDrop.
            </summary>
        </member>
        <member name="F:SourceGrid.RangeData.RANGEDATA_FORMAT">
            <summary>
            The string constant used with the System.Windows.Forms.DataFormats.GetFormat to register the clipboard format RangeData object.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.SourceRange">
            <summary>
            Range source
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.SourceValues">
            <summary>
            String array for values.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.StartDragPosition">
            <summary>
            Starting drag position. Used only for calculating drop destination range.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.SourceGrid">
            <summary>
            Working grid.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.CutMode">
            <summary>
            Cut mode. Default is none.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.LoadData(SourceGrid.GridVirtual,SourceGrid.Range,SourceGrid.CutMode)">
            <summary>
            Load the specified range data into a string array. This method use the cell editor to get the value.
            </summary>
            <param name="sourceGrid"></param>
            <param name="sourceRange"></param>
            <param name="cutMode">Cut mode. Can be used to remove the data from the source when pasting it to the destination or immediately.</param>
        </member>
        <member name="M:SourceGrid.RangeData.LoadData(System.String)">
            <summary>
            Load the data from a Tab delimited string of data. Each column is separated by a Tab and each row by a LineFeed character.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.WriteData(SourceGrid.GridVirtual,SourceGrid.Position)">
            <summary>
            Write the current loaded array string in the specified grid range. This method use the cell editor to set the value.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.StringToData(System.String,SourceGrid.Range@,System.Object[0:,0:]@)">
            <summary>
            Convert a string buffer into a Range object and an array of string.
            </summary>
            <param name="data"></param>
            <param name="range"></param>
            <param name="values"></param>
        </member>
        <member name="M:SourceGrid.RangeData.StringArrayToString(System.String[0:,0:])">
            <summary>
            Convert an array of strings into a string.
            Normally using a tab delimited for columns and a LineFeed for rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeData.DataToStringArray(SourceGrid.GridVirtual,SourceGrid.Range)">
            <summary>
            Convert a range and an array of string into a string. Normally using a tab delimited for columns and a LineFeed for rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeData.FindDestinationRange(SourceGrid.GridVirtual,SourceGrid.Position)">
            <summary>
            Calculate the destination range for the drop or paste operations.
            </summary>
            <param name="destinationGrid"></param>
            <param name="dropDestination"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeData.ClipboardSetData(SourceGrid.RangeData)">
            <summary>
            Copy the specified RangeData object the the clipboard
            </summary>
            <param name="rangeData"></param>
        </member>
        <member name="M:SourceGrid.RangeData.ClipboardGetData">
            <summary>
            Get a RangeData object from the clipboard. Return null if the clipboard doesn't contains valid data formats.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeRegion">
            <summary>
            RangeRegion is a collection of range that are never overlying each other.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.#ctor(SourceGrid.RangeRegion)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SourceGrid.RangeRegion.Item(System.Int32)">
            <summary>
            Returns the range at the specific position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetCellsPositions">
            <summary>
            Returns a Collection of cells that represents the current class
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetRowsIndex">
            <summary>
            Returns all the selected rows index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetColumnsIndex">
            <summary>
            Returns all the selected columns index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Position)">
            <summary>
            Indicates if the specified cell is selected
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Range)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.RangeRegion)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.ContainsRow(System.Int32)">
            <summary>
            Indicates if the specified row is selected
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.ContainsColumn(System.Int32)">
            <summary>
            Indicates if the specified column is selected
            </summary>
            <param name="p_Column"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.IntersectsWith(SourceGrid.Range)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Intersect(SourceGrid.Range)">
            <summary>
            Returns a non contiguous range of cells of the intersection between the current range and the specified range.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Exclude(SourceGrid.Range)">
            <summary>
            Returns the cells of the current range that don't intersect with the specified range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Clear">
            <summary>
            Remove all the cells
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.Clear(SourceGrid.Range)">
            <summary>
            Remove all the cells excluse the specified range
            </summary>
            <param name="pRangeToLeave"></param>
        </member>
        <member name="M:SourceGrid.RangeRegion.ResetRange">
            <summary>
            Reset the object to its original state. It is similar to the Clear method but doesn't call any events when removeing the saved positions, usually used when refreshing the cells with new data.
            To simply clear the object use the Clear method, only use this method when you want to force a reset of the object without calling additional methods.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Position)">
            <summary>
            Add the specified cell and add the cell to the collection.
            </summary>
            <param name="pCell"></param>
            <returns>Returns true if sucesfully added</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Position)">
            <summary>
            Remove from the collection the specified cell
            </summary>
            <param name="pCell"></param>
            <returns>Returns true if sucesfully removed</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Range)">
            <summary>
            Add the specified Range of cells
            </summary>
            <param name="pRange"></param>
            <returns>Returns true if sucesfully added</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Range)">
            <summary>
            Remove from the collection the specified range of cells
            </summary>
            <param name="pRange"></param>
            <returns>Returns true if sucesfully removed</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.RangeRegion)">
            <summary>
            Add the specified ranges of cells
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.RangeRegion)">
            <summary>
            Remove the specified ranges of cells
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.InternalAdd(SourceGrid.RangeRegion)">
            <summary>
            Prende un range che è già stato filtrato con solo le celle non presenti nell'attuale range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.InternalRemove(SourceGrid.RangeRegion)">
            <summary>
            Prende un range che è già stato filtrato con solo le celle presenti nell'attuale range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.RangeRegion.m_bValidated">
            <summary>
            Variabile che indica se lo stato interno della classe è stato modificato, serve per poter ottimizzare alcune verifiche.
            </summary>
        </member>
        <member name="T:SourceGrid.RowInfo">
            <summary>
            Row Information
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfo.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="P:SourceGrid.RowInfo.Height">
            <summary>
            Height of the current row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Index">
            <summary>
            Index of the current row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Visible">
            <summary>
            Gets or sets if the row is visible.
            Internally set the height to 0 to hide a row.
            </summary>
        </member>
        <member name="T:SourceGrid.RowInfoCollection">
            <summary>
            Collection of RowInfo
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.InsertRange(System.Int32,SourceGrid.RowInfo[])">
            <summary>
            Insert the specified number of rows at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="rows"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a row at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the RowInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a row from one position to another position
            </summary>
            <param name="p_CurrentRowPosition"></param>
            <param name="p_NewRowPosition"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of row 1 with row 2.
            </summary>
            <param name="p_RowIndex1"></param>
            <param name="p_RowIndex2"></param>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsAdded">
            <summary>
            Fired when the number of rows change
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsAdded(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when the number of rows change
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsRemoved">
            <summary>
            Fired when some rows are removed
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoved(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsRemoving">
            <summary>
            Fired before some rows are removed
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoving(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired before some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.RowInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a RowInfo at the specified position
            </summary>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowHeightChanged">
            <summary>
            Fired when the user change the Height property of one of the Row
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowHeightChanged(SourceGrid.RowInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.AutoSizeView">
            <summary>
            Auto size the rows calculating the required size only on the columns currently visible
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Clear">
            <summary>
            Remove all the columns
            </summary>
        </member>
        <member name="T:SourceGrid.RowsBase">
            <summary>
            Abstract base class for manage rows informations.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetHeight(System.Int32)">
            <summary>
            Gets the height of the specified row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowsBase.SetHeight(System.Int32,System.Int32)">
            <summary>
            Sets the height of the specified row.
            </summary>
            <param name="row"></param>
            <param name="height"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32)">
            <summary>
            Gets the rows index inside the specified display area.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the rows index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
            <param name="y"></param>
            <param name="height"></param>
            <param name="returnsPartial">True to returns also partial rows</param>
            <param name="returnsFixedRows"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.RowAtPoint(System.Int32)">
            <summary>
            Calculate the Row that have the Top value smaller or equal than the point p_Y, or -1 if not found found.
            </summary>
            <param name="y">Y Coordinate to search for a row</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RowsBase.FirstVisibleScrollableRow">
            <summary>
            Returns the first visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RowsBase.LastVisibleScrollableRow">
            <summary>
            Returns the last visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowsBase.MeasureRowHeight(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current row when drawn with the specified cells.
            </summary>
            <param name="row"></param>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
            <returns>Returns the required height</returns>
        </member>
        <member name="M:SourceGrid.RowsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the rows with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
        </member>
        <member name="M:SourceGrid.RowsBase.StretchToFit">
            <summary>
            stretch the rows height to always fit the available space when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsChanged">
            <summary>
            Fired when the numbers of rows changed.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetTop(System.Int32)">
            <summary>
            Gets the row top position.
            The Top is relative to the specified start position.
            Calculate the top using also the FixedRows if present.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetBottom(System.Int32)">
            <summary>
            Gets the row bottom position. GetTop + GetHeight.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.ShowRow(System.Int32)">
            <summary>
            Show a row (set the height to default height)
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.ShowRow(System.Int32,System.Boolean)">
            <summary>
            Makes row visible or hidden.
            Fires OnRowVisibilityChanged event only if row visibility is changed
            </summary>
            <param name="row"></param>
            <param name="isVisible"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.HideRow(System.Int32)">
            <summary>
            Hide the specified row (set the height to 0)
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.IsRowVisible(System.Int32)">
            <summary>
            Returns true if the specified row is visible
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RowsSimpleBase">
            <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
        </member>
        <member name="F:SourceGrid.StandardHiddenRowCoordinator.m_rowMerger">
            <summary>
            This will help us track which rows are hidden, and which are not
            </summary>
        </member>
        <member name="M:SourceGrid.StandardHiddenRowCoordinator.LoopVisibleRows(System.Int32,System.Int32)">
            <summary>
            Returns a sequence of row indexes which are visible only.
            Correctly handles invisible rows.
            </summary>
            <param name="scrollBarValue">The value of the vertical scroll bar. Note that
            this does not directly relate to row number. If there are no hidden rows at all,
            then scroll bar value directly relates to row index number. However,
            if some rows are hidden, then this value is different.
            Basically, it says how many visible rows must be scrolled down</param>
            <param name="numberOfRowsToProduce">How many visible rows to return</param>
            <returns>Can return less rows than requested. This might occur
            if you request to return visible rows in the end of the grid,
            and all the rows would be hidden. In that case no indexes would be returned
            at all, even though specific amount of rows was requested</returns>
        </member>
        <member name="T:SourceGrid.MultiColumnsComparer">
            <summary>
            A comparer used to sort more than one columns.
            </summary>
        </member>
        <member name="T:SourceGrid.DisplayStringCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the DisplayString of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.ValueCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the value of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Decorators.DecoratorHighlight.Range">
            <summary>
            Gets or sets the range to draw
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.CsvExporter">
            <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.GridPrintDocument">
            <summary>
            Grid print document.
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.GridPrintDocument.CellPrintView">
            <summary>
            Cell view when printing.
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.GridPrintDocument.HeaderCellPrintView">
            <summary>
            Header cell view when printing.
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.GridPrintDocument.RepeatFixedRows">
            <summary>
            Property if fixed rows should be repeated on each page.
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.GridPrintDocument.PageCount">
            <summary>
            Return calculated page count.
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.HTML">
            <summary>
            An utility class to export the grid in a html format file.
            </summary>
        </member>
        <member name="F:SourceGrid.Exporter.HTML.m_EmbeddedImagesPath">
            <summary>
            Key:Image, Value:ImageFileName
            </summary>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.#ctor(SourceGrid.Exporter.ExportHTMLMode,System.String,System.String,System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
            <param name="p_ImageFullPath">The path to write embedded images files</param>
            <param name="p_ImageRelativePath">The path used in the HTML source. If you save the images in the same path of the HTML file you can leave this path empty.</param>
            <param name="p_HtmlStream">The stream to write</param>
        </member>
        <member name="P:SourceGrid.Exporter.HTML.Mode">
            <summary>
            Export mode
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.HTML.EmbeddedImagesPath">
            <summary>
            List of images exported during HTML export
            </summary>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ClearEmbeddedImages">
            <summary>
            Clear the list of embedded images. This method don't delete the files only clear the list.
            </summary>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportImage(System.Drawing.Image)">
            <summary>
            Save the Image to file and returns the file
            </summary>
            <param name="p_Image"></param>
            <returns>Returns the path where the image is exported valid for the HTML page</returns>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ColorToHTML(System.Drawing.Color)">
            <summary>
            Convert a Color to HTML compatible string
            </summary>
            <param name="p_Color"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportHTML_Element_Font(System.Xml.XmlTextWriter,System.String,System.Drawing.Font)">
            <summary>
            Export a font html element with the specified font and text
            </summary>
            <param name="p_Writer"></param>
            <param name="p_DisplayText"></param>
            <param name="p_Font"></param>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportHTMLCell(SourceGrid.CellContext,System.Xml.XmlTextWriter)">
            <summary>
            Export the specified cell to HTML
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:SourceGrid.Exporter.ExportHTMLMode">
            <summary>
            Flags for the export html features (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.Image">
            <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
        </member>
        <member name="T:SourceGrid.Grid">
            <summary>
            The main grid control with static data.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.CreateAccessibilityInstance">
            <summary>
            Overriden to return a custom accessibility object instance. 
            </summary>
            <returns>AccessibleObject for the grid control.</returns>
        </member>
        <member name="T:SourceGrid.Grid.GridAccessibleObject">
            <summary>
            Provides information about the grid control in the acessibility tree. 
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridAccessibleObject.#ctor(SourceGrid.Grid)">
            <summary>
            Creates a new GridAccessibleObject
            </summary>
            <param name="owner">Owner</param>
        </member>
        <member name="P:SourceGrid.Grid.GridAccessibleObject.Role">
            <summary>
            Returns the role of the grid control
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridAccessibleObject.Name">
            <summary>
            Retrieves the accessible name of the grid control
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessibility object of a row in the grid.  
            </summary>
            <param name="index">Index of child</param>
            <returns>AccessibleObject of a child element</returns>
        </member>
        <member name="M:SourceGrid.Grid.GridAccessibleObject.GetChildCount">
            <summary>
            Returns the number of children
            </summary>
            <returns>The number of rows in the grid.</returns>
        </member>
        <member name="T:SourceGrid.Grid.GridRowAccessibleObject">
            <summary>
            Provides for information about grid rows in the acessibility tree. 
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridRowAccessibleObject.#ctor(SourceGrid.GridRow,SourceGrid.Grid.GridAccessibleObject)">
            <summary>
            Creates a new GridRowAccessibleObject
            </summary>
            <param name="gridRow">The grid row</param>
            <param name="parent">The grid row's parent grid</param>
        </member>
        <member name="P:SourceGrid.Grid.GridRowAccessibleObject.Bounds">
            <summary>
            Gets the bounding rectangle in screen coordinates. 
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowAccessibleObject.Name">
            <summary>
            Returns the name of the grid row. 
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowAccessibleObject.Role">
            <summary>
            Returns the role of the grid row.  
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowAccessibleObject.Parent">
            <summary>
            Returns the parent grid of the grid row.  
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridRowAccessibleObject.GetChild(System.Int32)">
            <summary>
            Returns a child cell of the row.  
            </summary>
            <param name="index">Index of child</param>
            <returns>AccessibleObject of a child element</returns>
        </member>
        <member name="M:SourceGrid.Grid.GridRowAccessibleObject.GetChildCount">
            <summary>
            Returns the number of children. 
            </summary>
            <returns>Number of cells in a row</returns>
        </member>
        <member name="T:SourceGrid.Grid.GridRowCellAccessibleObject">
            <summary>
            Provides information about grid cells in the accessibility tree.  
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridRowCellAccessibleObject.#ctor(SourceGrid.Cells.Cell,SourceGrid.Grid.GridRowAccessibleObject)">
            <summary>
            Creates a new GridRowCellAccessibleObject
            </summary>
            <param name="cell">The grid cell</param>
            <param name="parent">The parent row of the cell</param>
        </member>
        <member name="P:SourceGrid.Grid.GridRowCellAccessibleObject.Bounds">
            <summary>
            Gets the bounding rectange in screen coordinates. 
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowCellAccessibleObject.Role">
            <summary>
            Returns the role of the grid cell. 
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowCellAccessibleObject.Name">
            <summary>
            Returns the name of the cell.
            </summary>
            <remarks>
            If display text not found, returns a default name containing the column index.
            </remarks>
        </member>
        <member name="P:SourceGrid.Grid.GridRowCellAccessibleObject.Value">
            <summary>
            Set or get the value of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.GridRowCellAccessibleObject.Parent">
            <summary>
            Returns the parent row of the cell. 
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.SpannedCellReferences">
            <summary>
            Allows to check what spanned cells we have.
            Do not use this property directly from client code
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.CreateRowsObject">
            <summary>
            Method used to create the rows object, in this class of type RowInfoCollection.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.CreateColumnsObject">
            <summary>
            Method used to create the columns object, in this class of type ColumnInfoCollection.
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.ColumnsCount">
            <summary>
            Gets or Sets the number of columns
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.RowsCount">
            <summary>
            Gets or Sets the number of rows
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.Rows">
            <summary>
            RowsCount informations
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.Columns">
            <summary>
            Columns informations
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.OptimizeMode">
            <summary>
            Gets or sets the optimize mode. Default is ForRows
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.AllowOverlappingCells">
            <summary>
            Indicates that overlapping cells are not allowed and will be thrown an exception.
            This is needed due to the fact that when there are two overlapping spanned cells,
            SourceGrid can not reliably draw them, since the call to function GetCell(x,y)
            returns random results. However, some users epxressed the need to allow such
            behaviour. So this flag forces Grid to not check for overlapping cells
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.SetCell(System.Int32,System.Int32,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. Abstract method of the GridVirtual control
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.SetCell(SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. This method calls SetCell(int p_iRow, int p_iCol, Cells.ICellVirtual p_Cell)
            </summary>
            <param name="p_Position"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Returns or set a cell at the specified row and col.
            If you get a ICell position occupied by a row/col span cell,
            and EnableRowColSpan is true, this method returns the cell with Row/Col span.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GetSpannedCell(SourceGrid.Position)">
            <summary>
            Check if a cell exists in spanned cells.
            If yes, returns. If no, returns null
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Remove the specified cell
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:SourceGrid.Grid.RemoveSpannedCell(SourceGrid.Position)">
            <summary>
            Removes a spanned cell internal reference.
            This effectively removes any data in spannedCellReferences collection
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:SourceGrid.Grid.EnsureNoOtherCellsExist(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
            <summary>
            Check
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.EnsureDestinationSpannedAreaIsEmptyExceptOriginalCell(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="p_cell">except this cell</param>
        </member>
        <member name="M:SourceGrid.Grid.InsertCell(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
            <summary>
            Insert the specified cell
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GrowGrid">
            <summary>
            Call this method to update internal grid structures.
            This is used to update QuadTree space at the moment.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.Redim(System.Int32,System.Int32)">
            <summary>
            Set the number of columns and rows
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.MaxSpan">
            <summary>
            Gets the maximum rows or columns number to search when using Row/Col Span.
            This is a static property.
            This value is automatically calculated based on the current cells. Do not change this value manually.
            Default is 100.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.RangeToCellRange(SourceGrid.Range)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Grid.PositionToCellRange(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
            <param name="pPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Cells.ICell)">
            <summary>
            Force a redraw of the specified cell
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Position)">
            <summary>
            Force a cell to redraw. If ColSpan or RowSpan is greater than 0 this function invalidate the complete range with InvalidateRange
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="F:SourceGrid.Grid.mDrawnRange">
            <summary>
            List of the ranges already drawn
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.CustomSort">
            <summary>
            Gets or sets if when calling SortRangeRows method use a custom sort or an automatic sort. Default = false (automatic)
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridColumns.Insert(System.Int32)">
            <summary>
            Insert a column at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.GridColumns.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of Columns at the specified position
            </summary>
        </member>
        <member name="M:SourceGrid.GridRows.Insert(System.Int32)">
            <summary>
            Insert a row at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.GridRows.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of rows at the specified position
            </summary>
        </member>
        <member name="T:SourceGrid.GridVirtual">
            <summary>
            A abstract Grid control to support large virtual data. You must override: GetCell, CreateRowsObject, CreateColumnsObject
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.#ctor">
            <summary>
            Grid constructor
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateRowsObject">
            <summary>
            Abstract method used to create the rows object.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateColumnsObject">
            <summary>
            Abstract method used to create the columns object.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DefaultHeight">
            <summary>
            Indicates the default height of new row
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DefaultWidth">
            <summary>
            Indicates the default width of new column
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MinimumHeight">
            <summary>
            Indicates the minimum height of the rows
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MinimumWidth">
            <summary>
            Indicates the minimum width of the columns
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.AutoSizeCells(SourceGrid.Range)">
            <summary>
            Auto size the columns and the rows speified
            </summary>
            <param name="p_RangeToAutoSize"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.AutoSizeCells">
            <summary>
            Auto size all the columns and all the rows with the required width and height
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AutoStretchColumnsToFitWidth">
            <summary>
            True to auto stretch the columns width to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original width of the columns
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AutoStretchRowsToFitHeight">
            <summary>
            True to auto stretch the rows height to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original height of the rows
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CheckPositions">
            <summary>
            Check if the positions saved are still valid, for example if all the selected cells are still valid positions, if not the selection are removed without calling any other methods.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToRectangle(SourceGrid.Position)">
            <summary>
            Get the rectangle of the cell respect to the client area visible, the grid DisplayRectangle.
            Returns Rectangle.Empty if the Position is empty or if is not valid.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionAtPoint(System.Drawing.Point)">
            <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region), SearchInFixedCells = true. Return Position.Empty if no valid cells are found.
            </summary>
            <param name="point">Point relative to the DisplayRectangle area.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeToRectangle(SourceGrid.Range)">
            <summary>
            Returns the relative rectangle to the current scrollable area of the specified Range.
            Returns a Rectangle.Empty if the Range is not valid.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeAtArea(SourceGrid.CellPositionType)">
            <summary>
            Get the range of cells at the specified dispaly area.
            This method consider only the visible cells using the current scroll position.
            Returns a single Range for the specified grid area (scrollable, fixedtop, fixedleft, fixedtopleft).
            Returns Range.Empty if there isn't a valid range in the specified area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetVisibleRegion">
            <summary>
            Get the visible ranges. Returns a list of Range, one for each area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollRows(System.Int32)">
            <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollColumns(System.Int32)">
            <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsCellVisible(SourceGrid.Position,System.Boolean)">
            <summary>
            Indicates if the specified cell is visible.
            </summary>
            <param name="position"></param>
            <param name="partial">True to returns also partial visible cells</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollPositionToShowCell(SourceGrid.Position,System.Boolean,System.Drawing.Point@)">
            <summary>
            Return the scroll position that must be set to show a specific cell.
            </summary>
            <param name="position"></param>
            <param name="partial">True to consider also partial visible cells</param>
            <param name="newScrollPosition"></param>
            <returns>Return false if the cell is already visible, return true is the cell is not currently visible.</returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.ShowCell(SourceGrid.Position,System.Boolean)">
            <summary>
            Scroll the view to show the cell passed. Ensure that if the cell if invisible or partial visible it will be totally visible
            </summary>
            <param name="p_Position"></param>
            <param name="ignorePartial">true to ignore and consider already visible partial visible cells</param>
            <returns>Returns true if the Cell passed was already visible, otherwise false</returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateCell(SourceGrid.Position)">
            <summary>
            Force a cell to redraw.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateRange(SourceGrid.Range)">
            <summary>
            Force a range of cells to redraw.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeAtAreaExpanded(SourceGrid.CellPositionType)">
            <summary>
            Returns a visible area range, which is a bit
            expanded to the left and top
            </summary>
            <param name="areaType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.ScrollOnPoint(System.Drawing.Point)">
            <summary>
            Move the scrollbars to the direction specified by the point specified.
            Method used by the Mouse multi selection (MouseSelection.cs).
            Scroll the grid only if the specified location is outside the visible area.
            </summary>
            <param name="mousePoint"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateScrollableArea">
            <summary>
            Invalidate the cells
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeToCellRange(SourceGrid.Range)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToStartPosition(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real start position of cell. This is usefull when RowSpan or ColumnSPan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0 and if you call this method with 0,1 return again 0,0.
            Get the real position for the specified position. For example when p_Position is a merged cell this method returns the starting position of the merged cells.
            Usually this method returns the same cell specified as parameter. This method is used for processing arrow keys, to find a valid cell when the focus is in a merged cell.
            For this class returns always p_Position.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToCellRange(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
            <param name="pPosition"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.GridVirtual.mDragCellPosition">
            <summary>
            Indica la cella che ha subito l'ultimo evento di DragEnter
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DragCellPosition">
            <summary>
            The last cell that has received a DragEnter event.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeDragCell(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            Fired when the cell in the drag events change. For internal use only.
            </summary>
            <param name="cell"></param>
            <param name="pDragEventArgs"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnDragEnter(System.Windows.Forms.DragEventArgs)">
             <summary>
            Occurs when an object is dragged into the control's bounds.
            this case external control only
             </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnDragDrop(System.Windows.Forms.DragEventArgs)">
             <summary>
            Occurs when a drag-and-drop operation is completed.
            maybe external or internal
             </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnDragOver(System.Windows.Forms.DragEventArgs)">
             <summary>
            Occurs when an object is dragged over the control's bounds.
            maybe external or internal
             </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnDragLeave(System.EventArgs)">
            <summary>
            The DragLeave event is raised when the user drags the cursor out of the control or 
            the user cancels the current drag-and-drop operation.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
             <summary>
            The GiveFeedback event is raised when a drag-and-drop operation is started
             </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
             <summary>
            The QueryContinueDrag event occurs during a drag-and-drop operation and 
            allows the drag source to determine whether the drag-and-drop operation should be canceled
             TODO - create event handler in controller for this. 
             </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateSelectionObject">
            <summary>
            Virtual factory method used to create the SelectionBase derived object.
            The base method create a different object based on the value of SelectionMode property.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.GridVirtual.Selection">
            <summary>
            Gets or sets the Selection object that represents the selected cells and the active cell.
            Use the SelectionMode property to set the type of selection (free, by row, by column).
            Override the CreateSelectionObject method to create a custom Selection class for special needs.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.SelectionMode">
            <summary>
            Gets or sets the selection mode. Changing this property cause the Selection object to be recreated, for this reason remember to set this property at the beginning of your code.
            </summary>
        </member>
        <member name="F:SourceGrid.GridVirtual.m_MouseDownPosition">
            <summary>
            Represents the cell that receive the mouse down event
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseDownPosition">
            <summary>
            Represents the cell that have received the MouseDown event. You can use this cell for contextmenu logic. Can be null.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseCellPosition">
            <summary>
            The cell position currently under the mouse cursor (row, col).
            If you MouseDown on a cell this cell is the MouseCellPosition until an MouseUp is fired
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseCell(SourceGrid.Position)">
            <summary>
            Fired when the cell under the mouse change. For internal use only.
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseDownCell(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Change the cell currently under the mouse
            </summary>
            <param name="p_MouseDownCell"></param>
            <param name="p_MouseCell"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseSelectionFinish(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the selection eith the mouse is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseSelectionRange">
            <summary>
            Returns the cells that are selected with the mouse. Range.Empty if no cells are selected. Consider that this method returns valid cells only during the mouse down operations, when release the mouse the cells are selected and you can read them using Grid.Selection object.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnUndoMouseSelection(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the mouse selection must be canceled. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnApplyMouseSelection(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the mouse selection is succesfully finished. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseSelectionChange(System.EventArgs)">
            <summary>
            Fired when the mouse selection change. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.MouseSelectionFinish">
            <summary>
            Fired when the mouse selection finish. See also MouseSelectionRange.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseSelectionCorner(SourceGrid.Position)">
            <summary>
            Fired when the corner of the mouse selection change. For internal use only.
            </summary>
            <param name="p_Corner"></param>
        </member>
        <member name="F:SourceGrid.GridVirtual.m_firstCellShiftSelected">
            <summary>
            Stores the active position when user presses shift
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.GridVirtual.OverrideCommonCmdKey">
            <summary>
            True to override with the ProcessCmdKey the common Command Key: Enter, Escape, Tab
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.SpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. For example to disable Ctrl+C Copy operation remove from this enum the GridSpecialKeys.Ctrl_C.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AcceptsInputChar">
            <summary>
            True accepts input char when the grid has the focus. Used for example to start the edit operation without processing the char.
            If you set this property to false when the character is sended to the windows forms handler and can be used for example to execute directly some access key (shortcut keys).
            Default is true.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ProcessSpecialGridKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process Delete, Ctrl+C, Ctrl+V, Up, Down, Left, Right, Tab keys
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformCut(SourceGrid.RangeRegion)">
            <summary>
            Checks if cut mode is enabled, and copies
            data into clipaborad
            </summary>
            <param name="selRegion"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformPaste(SourceGrid.RangeRegion)">
            <summary>
            Checks if paste mode is enabled and writes
            data into grid from clipboard
            </summary>
            <param name="selRegion"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformCopy(SourceGrid.RangeRegion)">
            <summary>
            Checks if copy mode is enabled and copies data into clipboard
            </summary>
            <param name="selRegion"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformDelete(SourceGrid.RangeRegion)">
            <summary>
            Checks if delete is enabled, and clears values from
            given destination by invoking ClearValues(selRegion)
            </summary>
            <param name="selRegion"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Allow the grid to handle specials keys like Arrows and Tab. See also Grid.SpecialKeys
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsInputChar(System.Char)">
            <summary>
            IsInputChar method.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PaintCell(DevAge.Drawing.GraphicsCache,SourceGrid.CellContext,System.Drawing.RectangleF)">
            <summary>
            Draw the specified Cell
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when a user scroll with the mouse wheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:SourceGrid.GridVirtual.m_keybordActivePosition">
            <summary>
            Remember the active position, when the key was pressed.
            Events are called in this order:
            KeyDown
            KeyPress
            KeyUp
            
            During these three events, the same active position must be kept,
            regardless of whether it is changed in any of these events
            
            http://msdn.microsoft.com/en-us/library/system.windows.forms.control.keydown(VS.80).aspx
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.Focus(System.Boolean)">
            <summary>
            Set the Focus on the grid with an optional behaviour.
            If selectFirstCell is true and the FocusStyle is equal to FocusStyle.FocusFirstCellOnEnter then
            if there isn't a cell selected the first cell of the grid receive became the active cell.
            Otherwise the focus is not changed.
            The Default is true.
            </summary>
            <param name="selectFirstCell"></param>
        </member>
        <member name="P:SourceGrid.GridVirtual.LinkedControls">
            <summary>
            List of controls that are linked to a specific cell position.
            For example is used for editors controls. Key=Control, Value=Position.
            The controls are automatically removed from the list when they are removed from the Grid.Controls
            collection
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            OnHScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            OnVScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ArrangeLinkedControls">
            <summary>
            Refresh the linked controls bounds
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformStretch">
            <summary>
            Recalculate the scrollbar position and value based on the current cells, scroll client area, linked controls and more. If redraw == false this method has not effect.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnCellsAreaChanged">
            <summary>
            Force to recalculate scrollbars and panels location. Used usually after changing width and height of the columns / rows, or after adding or removing rows and columns.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.EnableSort">
            <summary>
            Tells if grid has sorting enabled.
            Note that you can still call manually functions to sort data,
            such as SortRangeRows, or even sort the data
            in your own data source. This property is for UI only
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.IRangeLoader,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid
            </summary>
            <param name="p_RangeToSort">Range to sort</param>
            <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col of the range</param>
            <param name="p_bAsc">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default comparer will be used</param>
        </member>
        <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.Range,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid.
            </summary>
            <param name="p_Range"></param>
            <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col</param>
            <param name="p_bAscending">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default ValueCellComparer comparer will be used</param>
        </member>
        <member name="E:SourceGrid.GridVirtual.SortingRangeRows">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
        </member>
        <member name="E:SourceGrid.GridVirtual.SortedRangeRows">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnSortedRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position. Abstract, must be implemented in the derived class.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCell(SourceGrid.Position)">
            <summary>
            Return the Cell at the specified Row and Col position. This method is called for sort operations and for Move operations. If position is Empty return null. This method calls GetCell(int p_iRow, int p_iCol)
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCellsAtRow(System.Int32)">
            <summary>
            Returns all the cells at specified row position
            </summary>
            <param name="p_RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCellsAtColumn(System.Int32)">
            <summary>
            Returns all the cells at specified column position
            </summary>
            <param name="p_ColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.GridVirtual.FixedRows">
            <summary>
            Gets or Sets how many rows are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.FixedColumns">
            <summary>
            Gets or Sets how many cols are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Rows">
            <summary>
            RowsCount informations
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Columns">
            <summary>
            Columns informations
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetPositionType(SourceGrid.Position)">
            <summary>
            Returns the type of a cell position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.GridVirtual.CompleteRange">
            <summary>
            Returns a Range that represents the complete cells of the grid
            </summary>
        </member>
        <member name="E:SourceGrid.GridVirtual.UserException">
            <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnUserException(SourceGrid.ExceptionEventArgs)">
            <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            If not handled by the user (Handled property = false) a MessageBox is used to display the exception.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.GridVirtual.RightToLeft">
            <summary>
            Hide the RightToLeft property and returns always No.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ClearValues(SourceGrid.RangeRegion)">
            <summary>
            Clear all the selected cells with a valid Model.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ToolTipText">
            <summary>
            ToolTip text
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ToolTip">
            <summary>
            Gets the tooltip control used when showing tooltip text.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Decorators">
            <summary>
            Grid decorators, used to draw additiona contents on the drawing surface
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ClipboardMode">
            <summary>
            Gets or sets the clipboard operation mode. Default is none
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ClipboardUseOnlyActivePosition">
            <summary>
            Gets or sets if only active cell should be used for clipboard operation. Default is whole selection
            </summary>
        </member>
        <member name="T:SourceGrid.ISpannedCellRangesController">
            <summary>
            This interfaces defines the logic how spanned cell ranges
            are handled.
            At the moment this interface is bloated, since it was
            copy pasted from implementation straight from Grid.
            
            In the future it would be nice to reduce it
            so that separate implementations would be possible
            </summary>
        </member>
        <member name="M:SourceGrid.ISpannedCellRangesController.UpdateOrAdd(SourceGrid.Range)">
            <summary>
            Adds or updates given range.
            Updates range only when existing range with given start position is found
            </summary>
            <param name="newRange"></param>
        </member>
        <member name="T:SourceGrid.ISpannedRangesCollection">
            <summary>
            This interface helps work with spanned ranges collection
            
            There are two implementations at the moment.
            One is SpannedRangesList,
            another is QuadTree implementation, which is much faster.
            Look at unit tests for speed comparisons:
            TestSpannedCellRnages_Performance: TestBoth.
            </summary>
        </member>
        <member name="P:SourceGrid.ISpannedRangesCollection.Count">
            <summary>
            Returns the number of ranges contained
            </summary>
        </member>
        <member name="M:SourceGrid.ISpannedRangesCollection.Update(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Searches for an old range. If finds, updates 
            found region. Else throws RangeNotFoundException
            </summary>
        </member>
        <member name="M:SourceGrid.ISpannedRangesCollection.Redim(System.Int32,System.Int32)">
            <summary>
            Increase size up to specified values.
            Note that shrinking is not possible
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:SourceGrid.ISpannedRangesCollection.Remove(SourceGrid.Range)">
            <summary>
            If does not find, throws RangeNotFoundException
            </summary>
        </member>
        <member name="M:SourceGrid.ISpannedRangesCollection.FindRangeWithStart(SourceGrid.Position)">
            <summary>
            Returns range which has exactly the same start position
            as indicated
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.QuadTreeRangesList">
            <summary>
            This is a QuadTree implementation for cell ranges.
            Performance is definetely not O(n*n) as in simple
            list of ranges
            
            Have a look at these numbers to see the difference:
            
            with simple List of Ranges
            Total 30000 spanned ranges
            Total result count 90000
            Total time 98541 ms
            Average time 0,98541
            Total queries 100000
            
            testing quad tree
            Total 30000 spanned ranges
            Total result count 90000
            Total time 1495 ms
            Average time 0,01495
            Total queries 100000
            max tree depth: 11
            
            </summary>
        </member>
        <member name="M:SourceGrid.SpannedCellRangesController.UpdateOrAdd(SourceGrid.Range)">
            <summary>
            Adds or updates given range.
            Updates range only when existing range with given start position is found
            </summary>
            <param name="newRange"></param>
        </member>
        <member name="M:SourceGrid.SpannedCellRangesController.Update(SourceGrid.Range)">
            <summary>
            Updates range whose start position matches.
            If no matches found, an exception is thrown
            </summary>
            <param name="newRange"></param>
        </member>
        <member name="T:SourceGrid.SpannedRangesList">
            <summary>
            A is simple List of Ranges.
            Uses simple iterating over list to find
            required range
            </summary>
        </member>
        <member name="M:SourceGrid.SpannedRangesList.GetFirstIntersectedRange(SourceGrid.Position)">
            <summary>
            Returns first intersecting region
            </summary>
            <param name="pos"></param>
        </member>
        <member name="T:SourceGrid.Selection.RangeMergerByCells">
            <summary>
            Similar to <see cref="T:SourceGrid.Selection.RangeMergerByRows"/>, this class merge adjancent
            ranges if they are differ only by row or column count.
            
            See TestRangeMergerByCells for unit tests, which show how this class works
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByCells.JoinAdjancedRecursive">
            <summary>
            Repeat this function until it returns false to recursively merge all ranges
            </summary>
            <returns>true, if at least two ranges were joined into single</returns>
        </member>
        <member name="T:SourceGrid.Selection.FreeSelection">
            <summary>
            A selection class that support free selection of cells (ranges)
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.IsEmpty">
            <summary>
            Returns true if the selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.GetSelectionRegion">
            <summary>
            Returns the selected region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified selection intersect with the range
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.SelectionChanged">
            <summary>
            Fired after when the selection change (added or removed).
            If you need more control over the selection I suggest to create a custom Selection class.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.GetSelectionRegion">
            <summary>
            Returns the selected region.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.IsSelectedRow(System.Int32)">
            <summary>
            Check if the row is selected. Returns true if one or more column of the row is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.CanReceiveFocus(SourceGrid.Position)">
            <summary>
            Returns true if the specified position can receive the focus.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.FocusFirstCell(System.Boolean)">
            <summary>
            Set the focus on the first available cells starting from the not fixed cells.
            If there is an active selection set the focus on the first selected cells.
            </summary>
            <param name="pResetSelection"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.BindToGrid(SourceGrid.GridVirtual)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            Does reset selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.MoveActiveCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="resetSelection">if false, selection is not reset</param>
            <param name="rowShift"></param>
            <param name="colShift"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.IsEmpty">
            <summary>
            Returns true if the selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.Invalidate">
            <summary>
            Invalidate all the selected cells
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.SelectRange(SourceGrid.Range,System.Boolean)">
            <summary>
            Select or unselect the specified range
            </summary>
            <param name="range"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.SelectCell(SourceGrid.Position,System.Boolean)">
            <summary>
            Select or unselect the specified cell
            </summary>
            <param name="position"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.IsSelectedCell(SourceGrid.Position)">
            <summary>
            Check if the cell is selected.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.IGridSelection.EnableMultiSelection">
            <summary>
            Gets or sets if enable multi selection using Ctrl key or Shift Key or with mouse. Default is true.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.ResetSelection(System.Boolean)">
            <summary>
            Reset the selection
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified row
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.SelectColumn(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified column
            </summary>
            <param name="column"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.FocusRow(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.FocusColumn(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.IGridSelection.Focus(SourceGrid.Position,System.Boolean)">
            <summary>
            Change the ActivePosition (focus) of the grid.
            </summary>
            <param name="pCellToActivate"></param>
            <param name="pResetSelection">True to deselect the previous selected cells</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Selection.IGridSelection.ActivePosition">
            <summary>
            Gets the active cell position. The cell with the focus.
            Returns Position.Empty if there isn't an active cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.IGridSelection.FocusStyle">
            <summary>
            Gets or sets the behavior of the focus and selection. Default is FocusStyle.Default.
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.CellGotFocus">
            <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.CellLostFocus">
            <summary>
            Fired before a cell lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.FocusRowLeaving">
            <summary>
            Fired before a row lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.FocusRowEntered">
            <summary>
            Fired after a row receive the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.FocusColumnLeaving">
            <summary>
            Fired before a column lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.IGridSelection.FocusColumnEntered">
            <summary>
            Fired after a column receive the focus
            </summary>
        </member>
        <member name="T:SourceGrid.Selection.RangeMergerByRows">
            <summary>
            Contains a list of ranges which differ only by row, that is vertically.
            This the reason why the class contains a word "row" in its name.
            
            "Merger" means that it will merge adjancent ranges into single big range.
            So, for example, if you have 100 ranges from first row to second, that
            equals to one big range from row 1 to 100. If Row 50 is not selected,
            then this class splits one big range into two smaller. One from first row
            to row number 49, and anoter range from row 51 to row 100
            
            Although some functions work with Range structure, which has also a horizontal 
            span, that information is actually not needed, and used as dummy only.
            
            
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.LoopAllRanges">
            <summary>
            Loops via all ranges. Ranges are guaranteed to be ordered
            from lowest row to highest.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.GetSelectedRowRegions(System.Int32,System.Int32)">
            <summary>
            Returns a list of selected ranges
            </summary>
            <param name="startColumn">start column, usually 0</param>
            <param name="endColumn">end column, usually equals to column count - 1</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.Merge(SourceGrid.Range)">
            <summary>
            </summary>
            <param name="rangeToMerge"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.MergeRecursive(SourceGrid.Range)">
            <summary>
            Merges given range with one of the intersecting range in m_ranges
            if no intersecting ranges is found, then rangeToMerge is
            added to m_ranges
            </summary>
            <param name="rangeToMerge"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.JoinAjdancedRecursive">
            <summary>
            Returns true if at least two ranges were joined
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.AddRange(SourceGrid.Range)">
            <summary>
            Add a range to collection. If the range can be added (merged)
            to existing range, it will be added so. This will guarantee
            that the number of different ranges is kept to minimal.
            In theory only if user selects every second row, this would produce
            RowCount / 2 number of ranges. In practice, there are rarely 
            more than 3 - 5 different selection regions
            </summary>
            <param name="rangeToAdd">columns values are ignored, so simply 
            put 0 as start colum and 1 as end column. Only row values matter</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.MergeByRow(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns new range witch is the max of both ranges in row axis
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.RemoveRange(SourceGrid.Range)">
            <summary>
            As opposed to Adding a range, this will remove a range.
            It might happend that removing a range is dividing one bigger range into two 
            smaller ones. So practically the number of ranges might increase.
            
            It might be that this method might carry more exact meaning with "Exclude", instead
            of "RemoveRange"
            </summary>
            <param name="rangeToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.RangeMergerByRows.GetRowsIndex">
            <summary>
            Returns a list of indexes of rows
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Selection.SelectionBase">
            <summary>
            Base selection class
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.BindToGrid(SourceGrid.GridVirtual)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.ActivePosition">
            <summary>
            Gets the active cell position. The cell with the focus.
            Returns Position.Empty if there isn't an active cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.Focus(SourceGrid.Position,System.Boolean)">
            <summary>
            Change the ActivePosition (focus) of the grid.
            </summary>
            <param name="pCellToActivate"></param>
            <param name="pResetSelection">True to deselect the previous selected cells</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusFirstCell(System.Boolean)">
            <summary>
            Set the focus on the first available cells starting from the not fixed cells.
            If there is an active selection set the focus on the first selected cells.
            </summary>
            <param name="pResetSelection"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusColumn(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusRow(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.FocusBackColor">
            <summary>
            Gets or sets the backColor of the cell with the Focus. Default is Color.Transparent.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.FocusStyle">
            <summary>
            Gets or sets the behavior of the focus and selection. Default is FocusStyle.Default.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.CanReceiveFocus(SourceGrid.Position)">
            <summary>
            Returns true if the specified position can receive the focus.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.CellGotFocus">
            <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.CellLostFocus">
            <summary>
            Fired before a cell lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusRowLeaving">
            <summary>
            Fired before a row lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusRowEntered">
            <summary>
            Fired after a row receive the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnLeaving">
            <summary>
            Fired before a column lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnEntered">
            <summary>
            Fired after a column receive the focus
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowLeaving(SourceGrid.RowCancelEventArgs)">
            <summary>
            Fired before a row lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowEntered(SourceGrid.RowEventArgs)">
            <summary>
            Fired after a row receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnLeaving(SourceGrid.ColumnCancelEventArgs)">
            <summary>
            Fired before a column lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnEntered(SourceGrid.ColumnEventArgs)">
            <summary>
            Fired after a column receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnCellGotFocus(SourceGrid.ChangeActivePositionEventArgs)">
            <summary>
            Fired when a cell receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnCellLostFocus(SourceGrid.ChangeActivePositionEventArgs)">
            <summary>
            Fired when a cell lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="rowShift"></param>
            <param name="colShift"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2).
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="start"></param>
            <param name="rowShift1"></param>
            <param name="colShift1"></param>
            <param name="rowShift2"></param>
            <param name="colShift2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.Invalidate">
            <summary>
            Invalidate all the selected cells
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.EnableMultiSelection">
            <summary>
            Gets or sets if enable multi selection using Ctrl key or Shift Key or with mouse. Default is true.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.BackColor">
            <summary>
            Gets or set the highlight backcolor.
            Usually is a color with a transparent value so you can see the color of the cell. Default is: Color.FromArgb(75, Color.FromKnownColor(KnownColor.Highlight))
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.Border">
            <summary>
            The Border used to highlight the range
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedColumn(System.Int32)">
            <summary>
            Check if the column is selected. Returns true if one or more row of the column is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectColumn(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified column
            </summary>
            <param name="column"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRow(System.Int32)">
            <summary>
            Check if the row is selected. Returns true if one or more column of the row is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified row
            </summary>
            <param name="row"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedCell(SourceGrid.Position)">
            <summary>
            Check if the cell is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectCell(SourceGrid.Position,System.Boolean)">
            <summary>
            Select or unselect the specified cell
            </summary>
            <param name="position"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRange(SourceGrid.Range)">
            <summary>
            Check if the range is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectRange(SourceGrid.Range,System.Boolean)">
            <summary>
            Select or unselect the specified range
            </summary>
            <param name="range"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnResetSelection">
            <summary>
            Reset the selection
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.ResetSelection(System.Boolean)">
            <summary>
            Reset the selection
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsEmpty">
            <summary>
            Returns true if the selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.GetSelectionRegion">
            <summary>
            Returns the selected region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified selection intersect with the range
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.ValidateRange(SourceGrid.Range)">
            <summary>
            Check if the range can be selected
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.SelectionChanged">
            <summary>
            Fired after when the selection change (added or removed).
            If you need more control over the selection I suggest to create a custom Selection class.
            </summary>
        </member>
        <member name="T:SourceGrid.Utils.SourceGridConvert">
            <summary>
            A generic converter class used to convert values from
            one type to another
            </summary>
        </member>
        <member name="M:SourceGrid.Utils.SourceGridConvert.To``1(System.Object)">
            <summary>
            Converts specified value to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:SourceGrid.Utils.SourceGridConvert.To(System.Object,System.Type)">
            <summary>
            Converts specified value to the specified type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="type">Type to convert to.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:QuadTreeLib.IHasRect">
            <summary>
            An interface that defines and object with a rectangle
            </summary>
        </member>
        <member name="T:QuadTreeLib.QuadTree">
            <summary>
            A Quadtree is a structure designed to partition space so
            that it's faster to find out what is inside or outside a given
            area. See http://en.wikipedia.org/wiki/Quadtree
            This QuadTree contains items that have an area (RectangleF)
            it will store a reference to the item in the quad
            that is just big enough to hold it. Each quad has a bucket that
            contain multiple items.
            </summary>
        </member>
        <member name="F:QuadTreeLib.QuadTree.m_root">
            <summary>
            The root QuadTreeNode
            </summary>
        </member>
        <member name="F:QuadTreeLib.QuadTree.m_rectangle">
            <summary>
            The bounds of this QuadTree
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTree.Root">
            <summary>
            Returns the root node
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTree.Contents">
            <summary>
            Returns all the content 
            </summary>
        </member>
        <member name="M:QuadTreeLib.QuadTree.Grow">
            <summary>
            Double ocuppied space by adding one more root level node.
            Current root will go under the new root
            </summary>
        </member>
        <member name="T:QuadTreeLib.QuadTree.QTAction">
            <summary>
            An delegate that performs an action on a QuadTreeNode
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:QuadTreeLib.QuadTree.#ctor(SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="P:QuadTreeLib.QuadTree.Count">
            <summary>
            Get the count of items in the QuadTree
            </summary>
        </member>
        <member name="M:QuadTreeLib.QuadTree.Insert(SourceGrid.Range)">
            <summary>
            Insert the feature into the QuadTree
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:QuadTreeLib.QuadTree.MaxDepth">
            <summary>
            returns
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuadTreeLib.QuadTree.Insert(System.Collections.Generic.IEnumerable{SourceGrid.Range})">
            <summary>
            Insert the feature into the QuadTree
            </summary>
        </member>
        <member name="M:QuadTreeLib.QuadTree.Query(SourceGrid.Range)">
            <summary>
            Query the QuadTree, returning the items that are in the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:QuadTreeLib.QuadTree.QueryFirst(SourceGrid.Position)">
            <summary>
            Return first matching range
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:QuadTreeLib.QuadTree.ForEach(QuadTreeLib.QuadTree.QTAction)">
            <summary>
            Do the specified action for each item in the quadtree
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:QuadTreeLib.IQuadTreeNodeDivider.CreateNewRoot(QuadTreeLib.QuadTreeNode)">
            <summary>
            Expand tree by creating new root.
            Add old root under new root, and create any
            additional tree nodes that are needed
            </summary>
            <param name="currentRoot"></param>
            <returns></returns>
        </member>
        <member name="T:QuadTreeLib.ProportioanteSizeNodeDivider">
            <summary>
            Tries to divide into nodes, that are more suited for grids,
            which expand more into rows than into columns.
            In this case, quad tree does not end up divided
            into regions where width is very very small.
            
            This is much more efficien space partitioning
            </summary>
        </member>
        <member name="T:QuadTreeLib.HalfSizeNodeDivider">
            <summary>
            Creates sub-nodes simply by dividing current node
            by 2 and creating 4 smaller regions.
            
            This is not efficient if the area is very rectangular,
            for example, row count 10 000 and column count 10
            
            Use ProportioanteSizeNodeDivider instead
            </summary>
        </member>
        <member name="T:QuadTreeLib.QuadTreeNode">
            <summary>
            The QuadTreeNode
            </summary>
        </member>
        <member name="M:QuadTreeLib.QuadTreeNode.#ctor(SourceGrid.Range,System.Int32,QuadTreeLib.QuadTree)">
            <summary>
            Construct a quadtree node with the given bounds
            </summary>
        </member>
        <member name="F:QuadTreeLib.QuadTreeNode.m_bounds">
            <summary>
            The area of this node
            </summary>
        </member>
        <member name="F:QuadTreeLib.QuadTreeNode.m_contents">
            <summary>
            The contents of this node.
            Note that the contents have no limit: this is not the standard way to impement a QuadTree
            </summary>
        </member>
        <member name="F:QuadTreeLib.QuadTreeNode.m_nodes">
            <summary>
            The child nodes of the QuadTree
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTreeNode.IsEmpty">
            <summary>
            Is the node empty
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTreeNode.Bounds">
            <summary>
            Area of the quadtree node
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTreeNode.Count">
            <summary>
            Total number of nodes in the this node and all SubNodes
            </summary>
        </member>
        <member name="P:QuadTreeLib.QuadTreeNode.SubTreeContents">
            <summary>
            Return the contents of this node and all subnodes in the true below this one.
            </summary>
        </member>
        <member name="M:QuadTreeLib.QuadTreeNode.QueryInternal(SourceGrid.Range,System.Boolean)">
            <summary>
            Query the QuadTree for items that are in the given area
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuadTreeLib.QuadTreeNode.Insert(SourceGrid.Range)">
            <summary>
            Insert an item to this node
            </summary>
            <param name="item"></param>
        </member>
    </members>
</doc>
